// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockrepository

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAdminRepository is an autogenerated mock type for the AdminRepository type
type MockAdminRepository struct {
	mock.Mock
}

type MockAdminRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminRepository) EXPECT() *MockAdminRepository_Expecter {
	return &MockAdminRepository_Expecter{mock: &_m.Mock}
}

// GetAdmin provides a mock function with given fields:
func (_m *MockAdminRepository) GetAdmin() entities.Admin {
	ret := _m.Called()

	var r0 entities.Admin
	if rf, ok := ret.Get(0).(func() entities.Admin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Admin)
	}

	return r0
}

// MockAdminRepository_GetAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdmin'
type MockAdminRepository_GetAdmin_Call struct {
	*mock.Call
}

// GetAdmin is a helper method to define mock.On call
func (_e *MockAdminRepository_Expecter) GetAdmin() *MockAdminRepository_GetAdmin_Call {
	return &MockAdminRepository_GetAdmin_Call{Call: _e.mock.On("GetAdmin")}
}

func (_c *MockAdminRepository_GetAdmin_Call) Run(run func()) *MockAdminRepository_GetAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdminRepository_GetAdmin_Call) Return(_a0 entities.Admin) *MockAdminRepository_GetAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_GetAdmin_Call) RunAndReturn(run func() entities.Admin) *MockAdminRepository_GetAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAdminJSON provides a mock function with given fields:
func (_m *MockAdminRepository) ReadAdminJSON() (entities.Admin, error) {
	ret := _m.Called()

	var r0 entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func() (entities.Admin, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entities.Admin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Admin)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminRepository_ReadAdminJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAdminJSON'
type MockAdminRepository_ReadAdminJSON_Call struct {
	*mock.Call
}

// ReadAdminJSON is a helper method to define mock.On call
func (_e *MockAdminRepository_Expecter) ReadAdminJSON() *MockAdminRepository_ReadAdminJSON_Call {
	return &MockAdminRepository_ReadAdminJSON_Call{Call: _e.mock.On("ReadAdminJSON")}
}

func (_c *MockAdminRepository_ReadAdminJSON_Call) Run(run func()) *MockAdminRepository_ReadAdminJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdminRepository_ReadAdminJSON_Call) Return(_a0 entities.Admin, _a1 error) *MockAdminRepository_ReadAdminJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminRepository_ReadAdminJSON_Call) RunAndReturn(run func() (entities.Admin, error)) *MockAdminRepository_ReadAdminJSON_Call {
	_c.Call.Return(run)
	return _c
}

// SetAdmin provides a mock function with given fields: newAdmin
func (_m *MockAdminRepository) SetAdmin(newAdmin entities.Admin) {
	_m.Called(newAdmin)
}

// MockAdminRepository_SetAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAdmin'
type MockAdminRepository_SetAdmin_Call struct {
	*mock.Call
}

// SetAdmin is a helper method to define mock.On call
//   - newAdmin entities.Admin
func (_e *MockAdminRepository_Expecter) SetAdmin(newAdmin interface{}) *MockAdminRepository_SetAdmin_Call {
	return &MockAdminRepository_SetAdmin_Call{Call: _e.mock.On("SetAdmin", newAdmin)}
}

func (_c *MockAdminRepository_SetAdmin_Call) Run(run func(newAdmin entities.Admin)) *MockAdminRepository_SetAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Admin))
	})
	return _c
}

func (_c *MockAdminRepository_SetAdmin_Call) Return() *MockAdminRepository_SetAdmin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdminRepository_SetAdmin_Call) RunAndReturn(run func(entities.Admin)) *MockAdminRepository_SetAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAdminJSON provides a mock function with given fields: admin
func (_m *MockAdminRepository) WriteAdminJSON(admin *entities.Admin) error {
	ret := _m.Called(admin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Admin) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminRepository_WriteAdminJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAdminJSON'
type MockAdminRepository_WriteAdminJSON_Call struct {
	*mock.Call
}

// WriteAdminJSON is a helper method to define mock.On call
//   - admin *entities.Admin
func (_e *MockAdminRepository_Expecter) WriteAdminJSON(admin interface{}) *MockAdminRepository_WriteAdminJSON_Call {
	return &MockAdminRepository_WriteAdminJSON_Call{Call: _e.mock.On("WriteAdminJSON", admin)}
}

func (_c *MockAdminRepository_WriteAdminJSON_Call) Run(run func(admin *entities.Admin)) *MockAdminRepository_WriteAdminJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Admin))
	})
	return _c
}

func (_c *MockAdminRepository_WriteAdminJSON_Call) Return(_a0 error) *MockAdminRepository_WriteAdminJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_WriteAdminJSON_Call) RunAndReturn(run func(*entities.Admin) error) *MockAdminRepository_WriteAdminJSON_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAdminRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAdminRepository creates a new instance of MockAdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAdminRepository(t mockConstructorTestingTNewMockAdminRepository) *MockAdminRepository {
	mock := &MockAdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
