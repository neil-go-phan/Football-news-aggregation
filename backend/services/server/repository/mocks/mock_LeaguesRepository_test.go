// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockrepository

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLeaguesRepository is an autogenerated mock type for the LeaguesRepository type
type MockLeaguesRepository struct {
	mock.Mock
}

type MockLeaguesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaguesRepository) EXPECT() *MockLeaguesRepository_Expecter {
	return &MockLeaguesRepository_Expecter{mock: &_m.Mock}
}

// AddLeague provides a mock function with given fields: newLeaguesName
func (_m *MockLeaguesRepository) AddLeague(newLeaguesName string) {
	_m.Called(newLeaguesName)
}

// MockLeaguesRepository_AddLeague_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLeague'
type MockLeaguesRepository_AddLeague_Call struct {
	*mock.Call
}

// AddLeague is a helper method to define mock.On call
//   - newLeaguesName string
func (_e *MockLeaguesRepository_Expecter) AddLeague(newLeaguesName interface{}) *MockLeaguesRepository_AddLeague_Call {
	return &MockLeaguesRepository_AddLeague_Call{Call: _e.mock.On("AddLeague", newLeaguesName)}
}

func (_c *MockLeaguesRepository_AddLeague_Call) Run(run func(newLeaguesName string)) *MockLeaguesRepository_AddLeague_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLeaguesRepository_AddLeague_Call) Return() *MockLeaguesRepository_AddLeague_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLeaguesRepository_AddLeague_Call) RunAndReturn(run func(string)) *MockLeaguesRepository_AddLeague_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeagues provides a mock function with given fields:
func (_m *MockLeaguesRepository) GetLeagues() entities.Leagues {
	ret := _m.Called()

	var r0 entities.Leagues
	if rf, ok := ret.Get(0).(func() entities.Leagues); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Leagues)
	}

	return r0
}

// MockLeaguesRepository_GetLeagues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeagues'
type MockLeaguesRepository_GetLeagues_Call struct {
	*mock.Call
}

// GetLeagues is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) GetLeagues() *MockLeaguesRepository_GetLeagues_Call {
	return &MockLeaguesRepository_GetLeagues_Call{Call: _e.mock.On("GetLeagues")}
}

func (_c *MockLeaguesRepository_GetLeagues_Call) Run(run func()) *MockLeaguesRepository_GetLeagues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_GetLeagues_Call) Return(_a0 entities.Leagues) *MockLeaguesRepository_GetLeagues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_GetLeagues_Call) RunAndReturn(run func() entities.Leagues) *MockLeaguesRepository_GetLeagues_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesName provides a mock function with given fields:
func (_m *MockLeaguesRepository) GetLeaguesName() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockLeaguesRepository_GetLeaguesName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesName'
type MockLeaguesRepository_GetLeaguesName_Call struct {
	*mock.Call
}

// GetLeaguesName is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) GetLeaguesName() *MockLeaguesRepository_GetLeaguesName_Call {
	return &MockLeaguesRepository_GetLeaguesName_Call{Call: _e.mock.On("GetLeaguesName")}
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) Run(run func()) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) Return(_a0 []string) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) RunAndReturn(run func() []string) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesNameActive provides a mock function with given fields:
func (_m *MockLeaguesRepository) GetLeaguesNameActive() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockLeaguesRepository_GetLeaguesNameActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesNameActive'
type MockLeaguesRepository_GetLeaguesNameActive_Call struct {
	*mock.Call
}

// GetLeaguesNameActive is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) GetLeaguesNameActive() *MockLeaguesRepository_GetLeaguesNameActive_Call {
	return &MockLeaguesRepository_GetLeaguesNameActive_Call{Call: _e.mock.On("GetLeaguesNameActive")}
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) Run(run func()) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) Return(_a0 []string) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) RunAndReturn(run func() []string) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Return(run)
	return _c
}

// ReadleaguesJSON provides a mock function with given fields:
func (_m *MockLeaguesRepository) ReadleaguesJSON() (entities.Leagues, error) {
	ret := _m.Called()

	var r0 entities.Leagues
	var r1 error
	if rf, ok := ret.Get(0).(func() (entities.Leagues, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entities.Leagues); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Leagues)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesRepository_ReadleaguesJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadleaguesJSON'
type MockLeaguesRepository_ReadleaguesJSON_Call struct {
	*mock.Call
}

// ReadleaguesJSON is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) ReadleaguesJSON() *MockLeaguesRepository_ReadleaguesJSON_Call {
	return &MockLeaguesRepository_ReadleaguesJSON_Call{Call: _e.mock.On("ReadleaguesJSON")}
}

func (_c *MockLeaguesRepository_ReadleaguesJSON_Call) Run(run func()) *MockLeaguesRepository_ReadleaguesJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_ReadleaguesJSON_Call) Return(_a0 entities.Leagues, _a1 error) *MockLeaguesRepository_ReadleaguesJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesRepository_ReadleaguesJSON_Call) RunAndReturn(run func() (entities.Leagues, error)) *MockLeaguesRepository_ReadleaguesJSON_Call {
	_c.Call.Return(run)
	return _c
}

// WriteLeaguesJSON provides a mock function with given fields: leagues
func (_m *MockLeaguesRepository) WriteLeaguesJSON(leagues entities.Leagues) error {
	ret := _m.Called(leagues)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Leagues) error); ok {
		r0 = rf(leagues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaguesRepository_WriteLeaguesJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteLeaguesJSON'
type MockLeaguesRepository_WriteLeaguesJSON_Call struct {
	*mock.Call
}

// WriteLeaguesJSON is a helper method to define mock.On call
//   - leagues entities.Leagues
func (_e *MockLeaguesRepository_Expecter) WriteLeaguesJSON(leagues interface{}) *MockLeaguesRepository_WriteLeaguesJSON_Call {
	return &MockLeaguesRepository_WriteLeaguesJSON_Call{Call: _e.mock.On("WriteLeaguesJSON", leagues)}
}

func (_c *MockLeaguesRepository_WriteLeaguesJSON_Call) Run(run func(leagues entities.Leagues)) *MockLeaguesRepository_WriteLeaguesJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Leagues))
	})
	return _c
}

func (_c *MockLeaguesRepository_WriteLeaguesJSON_Call) Return(_a0 error) *MockLeaguesRepository_WriteLeaguesJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_WriteLeaguesJSON_Call) RunAndReturn(run func(entities.Leagues) error) *MockLeaguesRepository_WriteLeaguesJSON_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLeaguesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLeaguesRepository creates a new instance of MockLeaguesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLeaguesRepository(t mockConstructorTestingTNewMockLeaguesRepository) *MockLeaguesRepository {
	mock := &MockLeaguesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
