// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockAdminRepository is an autogenerated mock type for the AdminRepository type
type MockAdminRepository struct {
	mock.Mock
}

type MockAdminRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdminRepository) EXPECT() *MockAdminRepository_Expecter {
	return &MockAdminRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: admin
func (_m *MockAdminRepository) Create(admin *entities.Admin) error {
	ret := _m.Called(admin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Admin) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAdminRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - admin *entities.Admin
func (_e *MockAdminRepository_Expecter) Create(admin interface{}) *MockAdminRepository_Create_Call {
	return &MockAdminRepository_Create_Call{Call: _e.mock.On("Create", admin)}
}

func (_c *MockAdminRepository_Create_Call) Run(run func(admin *entities.Admin)) *MockAdminRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Admin))
	})
	return _c
}

func (_c *MockAdminRepository_Create_Call) Return(_a0 error) *MockAdminRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_Create_Call) RunAndReturn(run func(*entities.Admin) error) *MockAdminRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: username
func (_m *MockAdminRepository) Get(username string) (*entities.Admin, error) {
	ret := _m.Called(username)

	var r0 *entities.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Admin, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Admin); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdminRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAdminRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - username string
func (_e *MockAdminRepository_Expecter) Get(username interface{}) *MockAdminRepository_Get_Call {
	return &MockAdminRepository_Get_Call{Call: _e.mock.On("Get", username)}
}

func (_c *MockAdminRepository_Get_Call) Run(run func(username string)) *MockAdminRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAdminRepository_Get_Call) Return(_a0 *entities.Admin, _a1 error) *MockAdminRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdminRepository_Get_Call) RunAndReturn(run func(string) (*entities.Admin, error)) *MockAdminRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: admin
func (_m *MockAdminRepository) UpdatePassword(admin *entities.Admin) error {
	ret := _m.Called(admin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Admin) error); ok {
		r0 = rf(admin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdminRepository_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockAdminRepository_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - admin *entities.Admin
func (_e *MockAdminRepository_Expecter) UpdatePassword(admin interface{}) *MockAdminRepository_UpdatePassword_Call {
	return &MockAdminRepository_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", admin)}
}

func (_c *MockAdminRepository_UpdatePassword_Call) Run(run func(admin *entities.Admin)) *MockAdminRepository_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Admin))
	})
	return _c
}

func (_c *MockAdminRepository_UpdatePassword_Call) Return(_a0 error) *MockAdminRepository_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdminRepository_UpdatePassword_Call) RunAndReturn(run func(*entities.Admin) error) *MockAdminRepository_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAdminRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAdminRepository creates a new instance of MockAdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAdminRepository(t mockConstructorTestingTNewMockAdminRepository) *MockAdminRepository {
	mock := &MockAdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
