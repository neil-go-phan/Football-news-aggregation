// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLineupRepository is an autogenerated mock type for the LineupRepository type
type MockLineupRepository struct {
	mock.Mock
}

type MockLineupRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLineupRepository) EXPECT() *MockLineupRepository_Expecter {
	return &MockLineupRepository_Expecter{mock: &_m.Mock}
}

// FirstOrCreate provides a mock function with given fields: lineup
func (_m *MockLineupRepository) FirstOrCreate(lineup *entities.MatchLineUp) (*entities.MatchLineUp, error) {
	ret := _m.Called(lineup)

	var r0 *entities.MatchLineUp
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.MatchLineUp) (*entities.MatchLineUp, error)); ok {
		return rf(lineup)
	}
	if rf, ok := ret.Get(0).(func(*entities.MatchLineUp) *entities.MatchLineUp); ok {
		r0 = rf(lineup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.MatchLineUp) error); ok {
		r1 = rf(lineup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLineupRepository_FirstOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOrCreate'
type MockLineupRepository_FirstOrCreate_Call struct {
	*mock.Call
}

// FirstOrCreate is a helper method to define mock.On call
//   - lineup *entities.MatchLineUp
func (_e *MockLineupRepository_Expecter) FirstOrCreate(lineup interface{}) *MockLineupRepository_FirstOrCreate_Call {
	return &MockLineupRepository_FirstOrCreate_Call{Call: _e.mock.On("FirstOrCreate", lineup)}
}

func (_c *MockLineupRepository_FirstOrCreate_Call) Run(run func(lineup *entities.MatchLineUp)) *MockLineupRepository_FirstOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.MatchLineUp))
	})
	return _c
}

func (_c *MockLineupRepository_FirstOrCreate_Call) Return(_a0 *entities.MatchLineUp, _a1 error) *MockLineupRepository_FirstOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLineupRepository_FirstOrCreate_Call) RunAndReturn(run func(*entities.MatchLineUp) (*entities.MatchLineUp, error)) *MockLineupRepository_FirstOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockLineupRepository) Get(id uint) (*entities.MatchLineUp, error) {
	ret := _m.Called(id)

	var r0 *entities.MatchLineUp
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entities.MatchLineUp, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entities.MatchLineUp); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLineupRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLineupRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint
func (_e *MockLineupRepository_Expecter) Get(id interface{}) *MockLineupRepository_Get_Call {
	return &MockLineupRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockLineupRepository_Get_Call) Run(run func(id uint)) *MockLineupRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockLineupRepository_Get_Call) Return(_a0 *entities.MatchLineUp, _a1 error) *MockLineupRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLineupRepository_Get_Call) RunAndReturn(run func(uint) (*entities.MatchLineUp, error)) *MockLineupRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLineupRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLineupRepository creates a new instance of MockLineupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLineupRepository(t mockConstructorTestingTNewMockLineupRepository) *MockLineupRepository {
	mock := &MockLineupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
