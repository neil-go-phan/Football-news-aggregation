// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	pb "server/proto"
	mock "github.com/stretchr/testify/mock"
)

// MockCrawlerServiceClient is an autogenerated mock type for the CrawlerServiceClient type
type MockCrawlerServiceClient struct {
	mock.Mock
}

type MockCrawlerServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCrawlerServiceClient) EXPECT() *MockCrawlerServiceClient_Expecter {
	return &MockCrawlerServiceClient_Expecter{mock: &_m.Mock}
}

// GetArticles provides a mock function with given fields: ctx, in, opts
func (_m *MockCrawlerServiceClient) GetArticles(ctx context.Context, in *pb.KeywordToSearch, opts ...grpc.CallOption) (pb.CrawlerService_GetArticlesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.CrawlerService_GetArticlesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.KeywordToSearch, ...grpc.CallOption) (pb.CrawlerService_GetArticlesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.KeywordToSearch, ...grpc.CallOption) pb.CrawlerService_GetArticlesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.CrawlerService_GetArticlesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.KeywordToSearch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrawlerServiceClient_GetArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticles'
type MockCrawlerServiceClient_GetArticles_Call struct {
	*mock.Call
}

// GetArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *KeywordToSearch
//   - opts ...grpc.CallOption
func (_e *MockCrawlerServiceClient_Expecter) GetArticles(ctx interface{}, in interface{}, opts ...interface{}) *MockCrawlerServiceClient_GetArticles_Call {
	return &MockCrawlerServiceClient_GetArticles_Call{Call: _e.mock.On("GetArticles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCrawlerServiceClient_GetArticles_Call) Run(run func(ctx context.Context, in *pb.KeywordToSearch, opts ...grpc.CallOption)) *MockCrawlerServiceClient_GetArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.KeywordToSearch), variadicArgs...)
	})
	return _c
}

func (_c *MockCrawlerServiceClient_GetArticles_Call) Return(_a0 pb.CrawlerService_GetArticlesClient, _a1 error) *MockCrawlerServiceClient_GetArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrawlerServiceClient_GetArticles_Call) RunAndReturn(run func(context.Context, *pb.KeywordToSearch, ...grpc.CallOption) (pb.CrawlerService_GetArticlesClient, error)) *MockCrawlerServiceClient_GetArticles_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchDetail provides a mock function with given fields: ctx, in, opts
func (_m *MockCrawlerServiceClient) GetMatchDetail(ctx context.Context, in *pb.MatchURLs, opts ...grpc.CallOption) (pb.CrawlerService_GetMatchDetailClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.CrawlerService_GetMatchDetailClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.MatchURLs, ...grpc.CallOption) (pb.CrawlerService_GetMatchDetailClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.MatchURLs, ...grpc.CallOption) pb.CrawlerService_GetMatchDetailClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.CrawlerService_GetMatchDetailClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.MatchURLs, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrawlerServiceClient_GetMatchDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchDetail'
type MockCrawlerServiceClient_GetMatchDetail_Call struct {
	*mock.Call
}

// GetMatchDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MatchURLs
//   - opts ...grpc.CallOption
func (_e *MockCrawlerServiceClient_Expecter) GetMatchDetail(ctx interface{}, in interface{}, opts ...interface{}) *MockCrawlerServiceClient_GetMatchDetail_Call {
	return &MockCrawlerServiceClient_GetMatchDetail_Call{Call: _e.mock.On("GetMatchDetail",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCrawlerServiceClient_GetMatchDetail_Call) Run(run func(ctx context.Context, in *pb.MatchURLs, opts ...grpc.CallOption)) *MockCrawlerServiceClient_GetMatchDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.MatchURLs), variadicArgs...)
	})
	return _c
}

func (_c *MockCrawlerServiceClient_GetMatchDetail_Call) Return(_a0 pb.CrawlerService_GetMatchDetailClient, _a1 error) *MockCrawlerServiceClient_GetMatchDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrawlerServiceClient_GetMatchDetail_Call) RunAndReturn(run func(context.Context, *pb.MatchURLs, ...grpc.CallOption) (pb.CrawlerService_GetMatchDetailClient, error)) *MockCrawlerServiceClient_GetMatchDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedulesOnDay provides a mock function with given fields: ctx, in, opts
func (_m *MockCrawlerServiceClient) GetSchedulesOnDay(ctx context.Context, in *pb.Date, opts ...grpc.CallOption) (*pb.SchedulesReponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.SchedulesReponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Date, ...grpc.CallOption) (*pb.SchedulesReponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Date, ...grpc.CallOption) *pb.SchedulesReponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SchedulesReponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.Date, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrawlerServiceClient_GetSchedulesOnDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedulesOnDay'
type MockCrawlerServiceClient_GetSchedulesOnDay_Call struct {
	*mock.Call
}

// GetSchedulesOnDay is a helper method to define mock.On call
//   - ctx context.Context
//   - in *Date
//   - opts ...grpc.CallOption
func (_e *MockCrawlerServiceClient_Expecter) GetSchedulesOnDay(ctx interface{}, in interface{}, opts ...interface{}) *MockCrawlerServiceClient_GetSchedulesOnDay_Call {
	return &MockCrawlerServiceClient_GetSchedulesOnDay_Call{Call: _e.mock.On("GetSchedulesOnDay",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCrawlerServiceClient_GetSchedulesOnDay_Call) Run(run func(ctx context.Context, in *pb.Date, opts ...grpc.CallOption)) *MockCrawlerServiceClient_GetSchedulesOnDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.Date), variadicArgs...)
	})
	return _c
}

func (_c *MockCrawlerServiceClient_GetSchedulesOnDay_Call) Return(_a0 *pb.SchedulesReponse, _a1 error) *MockCrawlerServiceClient_GetSchedulesOnDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrawlerServiceClient_GetSchedulesOnDay_Call) RunAndReturn(run func(context.Context, *pb.Date, ...grpc.CallOption) (*pb.SchedulesReponse, error)) *MockCrawlerServiceClient_GetSchedulesOnDay_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCrawlerServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCrawlerServiceClient creates a new instance of MockCrawlerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCrawlerServiceClient(t mockConstructorTestingTNewMockCrawlerServiceClient) *MockCrawlerServiceClient {
	mock := &MockCrawlerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
