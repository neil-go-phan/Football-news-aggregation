// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMatchRepository is an autogenerated mock type for the MatchRepository type
type MockMatchRepository struct {
	mock.Mock
}

type MockMatchRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchRepository) EXPECT() *MockMatchRepository_Expecter {
	return &MockMatchRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: match
func (_m *MockMatchRepository) Create(match *entities.Match) error {
	ret := _m.Called(match)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Match) error); ok {
		r0 = rf(match)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMatchRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - match *entities.Match
func (_e *MockMatchRepository_Expecter) Create(match interface{}) *MockMatchRepository_Create_Call {
	return &MockMatchRepository_Create_Call{Call: _e.mock.On("Create", match)}
}

func (_c *MockMatchRepository_Create_Call) Run(run func(match *entities.Match)) *MockMatchRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Match))
	})
	return _c
}

func (_c *MockMatchRepository_Create_Call) Return(_a0 error) *MockMatchRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_Create_Call) RunAndReturn(run func(*entities.Match) error) *MockMatchRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetIDWithDateAndClubName provides a mock function with given fields: date, clubName1, clubName2
func (_m *MockMatchRepository) GetIDWithDateAndClubName(date time.Time, clubName1 string, clubName2 string) (*entities.Match, error) {
	ret := _m.Called(date, clubName1, clubName2)

	var r0 *entities.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string, string) (*entities.Match, error)); ok {
		return rf(date, clubName1, clubName2)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string, string) *entities.Match); ok {
		r0 = rf(date, clubName1, clubName2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, string, string) error); ok {
		r1 = rf(date, clubName1, clubName2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_GetIDWithDateAndClubName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDWithDateAndClubName'
type MockMatchRepository_GetIDWithDateAndClubName_Call struct {
	*mock.Call
}

// GetIDWithDateAndClubName is a helper method to define mock.On call
//   - date time.Time
//   - clubName1 string
//   - clubName2 string
func (_e *MockMatchRepository_Expecter) GetIDWithDateAndClubName(date interface{}, clubName1 interface{}, clubName2 interface{}) *MockMatchRepository_GetIDWithDateAndClubName_Call {
	return &MockMatchRepository_GetIDWithDateAndClubName_Call{Call: _e.mock.On("GetIDWithDateAndClubName", date, clubName1, clubName2)}
}

func (_c *MockMatchRepository_GetIDWithDateAndClubName_Call) Run(run func(date time.Time, clubName1 string, clubName2 string)) *MockMatchRepository_GetIDWithDateAndClubName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMatchRepository_GetIDWithDateAndClubName_Call) Return(_a0 *entities.Match, _a1 error) *MockMatchRepository_GetIDWithDateAndClubName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_GetIDWithDateAndClubName_Call) RunAndReturn(run func(time.Time, string, string) (*entities.Match, error)) *MockMatchRepository_GetIDWithDateAndClubName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatch provides a mock function with given fields: match
func (_m *MockMatchRepository) GetMatch(match *entities.Match) (*entities.Match, error) {
	ret := _m.Called(match)

	var r0 *entities.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Match) (*entities.Match, error)); ok {
		return rf(match)
	}
	if rf, ok := ret.Get(0).(func(*entities.Match) *entities.Match); ok {
		r0 = rf(match)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Match) error); ok {
		r1 = rf(match)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchRepository_GetMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatch'
type MockMatchRepository_GetMatch_Call struct {
	*mock.Call
}

// GetMatch is a helper method to define mock.On call
//   - match *entities.Match
func (_e *MockMatchRepository_Expecter) GetMatch(match interface{}) *MockMatchRepository_GetMatch_Call {
	return &MockMatchRepository_GetMatch_Call{Call: _e.mock.On("GetMatch", match)}
}

func (_c *MockMatchRepository_GetMatch_Call) Run(run func(match *entities.Match)) *MockMatchRepository_GetMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Match))
	})
	return _c
}

func (_c *MockMatchRepository_GetMatch_Call) Return(_a0 *entities.Match, _a1 error) *MockMatchRepository_GetMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchRepository_GetMatch_Call) RunAndReturn(run func(*entities.Match) (*entities.Match, error)) *MockMatchRepository_GetMatch_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWhenMatchDetailCrawl provides a mock function with given fields: match
func (_m *MockMatchRepository) UpdateWhenMatchDetailCrawl(match *entities.Match) error {
	ret := _m.Called(match)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Match) error); ok {
		r0 = rf(match)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_UpdateWhenMatchDetailCrawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWhenMatchDetailCrawl'
type MockMatchRepository_UpdateWhenMatchDetailCrawl_Call struct {
	*mock.Call
}

// UpdateWhenMatchDetailCrawl is a helper method to define mock.On call
//   - match *entities.Match
func (_e *MockMatchRepository_Expecter) UpdateWhenMatchDetailCrawl(match interface{}) *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call {
	return &MockMatchRepository_UpdateWhenMatchDetailCrawl_Call{Call: _e.mock.On("UpdateWhenMatchDetailCrawl", match)}
}

func (_c *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call) Run(run func(match *entities.Match)) *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Match))
	})
	return _c
}

func (_c *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call) Return(_a0 error) *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call) RunAndReturn(run func(*entities.Match) error) *MockMatchRepository_UpdateWhenMatchDetailCrawl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWhenScheduleCrawl provides a mock function with given fields: match
func (_m *MockMatchRepository) UpdateWhenScheduleCrawl(match *entities.Match) error {
	ret := _m.Called(match)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Match) error); ok {
		r0 = rf(match)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchRepository_UpdateWhenScheduleCrawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWhenScheduleCrawl'
type MockMatchRepository_UpdateWhenScheduleCrawl_Call struct {
	*mock.Call
}

// UpdateWhenScheduleCrawl is a helper method to define mock.On call
//   - match *entities.Match
func (_e *MockMatchRepository_Expecter) UpdateWhenScheduleCrawl(match interface{}) *MockMatchRepository_UpdateWhenScheduleCrawl_Call {
	return &MockMatchRepository_UpdateWhenScheduleCrawl_Call{Call: _e.mock.On("UpdateWhenScheduleCrawl", match)}
}

func (_c *MockMatchRepository_UpdateWhenScheduleCrawl_Call) Run(run func(match *entities.Match)) *MockMatchRepository_UpdateWhenScheduleCrawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Match))
	})
	return _c
}

func (_c *MockMatchRepository_UpdateWhenScheduleCrawl_Call) Return(_a0 error) *MockMatchRepository_UpdateWhenScheduleCrawl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchRepository_UpdateWhenScheduleCrawl_Call) RunAndReturn(run func(*entities.Match) error) *MockMatchRepository_UpdateWhenScheduleCrawl_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMatchRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMatchRepository creates a new instance of MockMatchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMatchRepository(t mockConstructorTestingTNewMockMatchRepository) *MockMatchRepository {
	mock := &MockMatchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
