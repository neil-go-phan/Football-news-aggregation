// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLineUpServices is an autogenerated mock type for the LineUpServices type
type MockLineUpServices struct {
	mock.Mock
}

type MockLineUpServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLineUpServices) EXPECT() *MockLineUpServices_Expecter {
	return &MockLineUpServices_Expecter{mock: &_m.Mock}
}

// GetLineUps provides a mock function with given fields: id1, id2
func (_m *MockLineUpServices) GetLineUps(id1 uint, id2 uint) (*entities.MatchLineUp, *entities.MatchLineUp, error) {
	ret := _m.Called(id1, id2)

	var r0 *entities.MatchLineUp
	var r1 *entities.MatchLineUp
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*entities.MatchLineUp, *entities.MatchLineUp, error)); ok {
		return rf(id1, id2)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *entities.MatchLineUp); ok {
		r0 = rf(id1, id2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) *entities.MatchLineUp); ok {
		r1 = rf(id1, id2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(id1, id2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLineUpServices_GetLineUps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLineUps'
type MockLineUpServices_GetLineUps_Call struct {
	*mock.Call
}

// GetLineUps is a helper method to define mock.On call
//   - id1 uint
//   - id2 uint
func (_e *MockLineUpServices_Expecter) GetLineUps(id1 interface{}, id2 interface{}) *MockLineUpServices_GetLineUps_Call {
	return &MockLineUpServices_GetLineUps_Call{Call: _e.mock.On("GetLineUps", id1, id2)}
}

func (_c *MockLineUpServices_GetLineUps_Call) Run(run func(id1 uint, id2 uint)) *MockLineUpServices_GetLineUps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockLineUpServices_GetLineUps_Call) Return(_a0 *entities.MatchLineUp, _a1 *entities.MatchLineUp, _a2 error) *MockLineUpServices_GetLineUps_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLineUpServices_GetLineUps_Call) RunAndReturn(run func(uint, uint) (*entities.MatchLineUp, *entities.MatchLineUp, error)) *MockLineUpServices_GetLineUps_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: lineup
func (_m *MockLineUpServices) GetOrCreate(lineup *entities.MatchLineUp) (*entities.MatchLineUp, error) {
	ret := _m.Called(lineup)

	var r0 *entities.MatchLineUp
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.MatchLineUp) (*entities.MatchLineUp, error)); ok {
		return rf(lineup)
	}
	if rf, ok := ret.Get(0).(func(*entities.MatchLineUp) *entities.MatchLineUp); ok {
		r0 = rf(lineup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.MatchLineUp) error); ok {
		r1 = rf(lineup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLineUpServices_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type MockLineUpServices_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - lineup *entities.MatchLineUp
func (_e *MockLineUpServices_Expecter) GetOrCreate(lineup interface{}) *MockLineUpServices_GetOrCreate_Call {
	return &MockLineUpServices_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", lineup)}
}

func (_c *MockLineUpServices_GetOrCreate_Call) Run(run func(lineup *entities.MatchLineUp)) *MockLineUpServices_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.MatchLineUp))
	})
	return _c
}

func (_c *MockLineUpServices_GetOrCreate_Call) Return(_a0 *entities.MatchLineUp, _a1 error) *MockLineUpServices_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLineUpServices_GetOrCreate_Call) RunAndReturn(run func(*entities.MatchLineUp) (*entities.MatchLineUp, error)) *MockLineUpServices_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLineUpServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLineUpServices creates a new instance of MockLineUpServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLineUpServices(t mockConstructorTestingTNewMockLineUpServices) *MockLineUpServices {
	mock := &MockLineUpServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
