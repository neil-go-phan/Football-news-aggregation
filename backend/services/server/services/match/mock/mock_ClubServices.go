// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockClubServices is an autogenerated mock type for the ClubServices type
type MockClubServices struct {
	mock.Mock
}

type MockClubServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClubServices) EXPECT() *MockClubServices_Expecter {
	return &MockClubServices_Expecter{mock: &_m.Mock}
}

// GetClubByName provides a mock function with given fields: clubName
func (_m *MockClubServices) GetClubByName(clubName string) (*entities.Club, error) {
	ret := _m.Called(clubName)

	var r0 *entities.Club
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Club, error)); ok {
		return rf(clubName)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Club); ok {
		r0 = rf(clubName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Club)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clubName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClubServices_GetClubByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClubByName'
type MockClubServices_GetClubByName_Call struct {
	*mock.Call
}

// GetClubByName is a helper method to define mock.On call
//   - clubName string
func (_e *MockClubServices_Expecter) GetClubByName(clubName interface{}) *MockClubServices_GetClubByName_Call {
	return &MockClubServices_GetClubByName_Call{Call: _e.mock.On("GetClubByName", clubName)}
}

func (_c *MockClubServices_GetClubByName_Call) Run(run func(clubName string)) *MockClubServices_GetClubByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClubServices_GetClubByName_Call) Return(_a0 *entities.Club, _a1 error) *MockClubServices_GetClubByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClubServices_GetClubByName_Call) RunAndReturn(run func(string) (*entities.Club, error)) *MockClubServices_GetClubByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: clubName, logo
func (_m *MockClubServices) GetOrCreate(clubName string, logo string) (*entities.Club, error) {
	ret := _m.Called(clubName, logo)

	var r0 *entities.Club
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*entities.Club, error)); ok {
		return rf(clubName, logo)
	}
	if rf, ok := ret.Get(0).(func(string, string) *entities.Club); ok {
		r0 = rf(clubName, logo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Club)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clubName, logo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClubServices_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type MockClubServices_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - clubName string
//   - logo string
func (_e *MockClubServices_Expecter) GetOrCreate(clubName interface{}, logo interface{}) *MockClubServices_GetOrCreate_Call {
	return &MockClubServices_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", clubName, logo)}
}

func (_c *MockClubServices_GetOrCreate_Call) Run(run func(clubName string, logo string)) *MockClubServices_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClubServices_GetOrCreate_Call) Return(_a0 *entities.Club, _a1 error) *MockClubServices_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClubServices_GetOrCreate_Call) RunAndReturn(run func(string, string) (*entities.Club, error)) *MockClubServices_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockClubServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClubServices creates a new instance of MockClubServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClubServices(t mockConstructorTestingTNewMockClubServices) *MockClubServices {
	mock := &MockClubServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
