// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLeaguesRepository is an autogenerated mock type for the LeaguesRepository type
type MockLeaguesRepository struct {
	mock.Mock
}

type MockLeaguesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaguesRepository) EXPECT() *MockLeaguesRepository_Expecter {
	return &MockLeaguesRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: league
func (_m *MockLeaguesRepository) Create(league *entities.League) error {
	ret := _m.Called(league)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.League) error); ok {
		r0 = rf(league)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaguesRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLeaguesRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - league *entities.League
func (_e *MockLeaguesRepository_Expecter) Create(league interface{}) *MockLeaguesRepository_Create_Call {
	return &MockLeaguesRepository_Create_Call{Call: _e.mock.On("Create", league)}
}

func (_c *MockLeaguesRepository_Create_Call) Run(run func(league *entities.League)) *MockLeaguesRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.League))
	})
	return _c
}

func (_c *MockLeaguesRepository_Create_Call) Return(_a0 error) *MockLeaguesRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_Create_Call) RunAndReturn(run func(*entities.League) error) *MockLeaguesRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: leagueName
func (_m *MockLeaguesRepository) GetByName(leagueName string) (*entities.League, error) {
	ret := _m.Called(leagueName)

	var r0 *entities.League
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.League, error)); ok {
		return rf(leagueName)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.League); ok {
		r0 = rf(leagueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.League)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(leagueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockLeaguesRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - leagueName string
func (_e *MockLeaguesRepository_Expecter) GetByName(leagueName interface{}) *MockLeaguesRepository_GetByName_Call {
	return &MockLeaguesRepository_GetByName_Call{Call: _e.mock.On("GetByName", leagueName)}
}

func (_c *MockLeaguesRepository_GetByName_Call) Run(run func(leagueName string)) *MockLeaguesRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLeaguesRepository_GetByName_Call) Return(_a0 *entities.League, _a1 error) *MockLeaguesRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesRepository_GetByName_Call) RunAndReturn(run func(string) (*entities.League, error)) *MockLeaguesRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesName provides a mock function with given fields:
func (_m *MockLeaguesRepository) GetLeaguesName() (*[]entities.League, error) {
	ret := _m.Called()

	var r0 *[]entities.League
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entities.League, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entities.League); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.League)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesRepository_GetLeaguesName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesName'
type MockLeaguesRepository_GetLeaguesName_Call struct {
	*mock.Call
}

// GetLeaguesName is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) GetLeaguesName() *MockLeaguesRepository_GetLeaguesName_Call {
	return &MockLeaguesRepository_GetLeaguesName_Call{Call: _e.mock.On("GetLeaguesName")}
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) Run(run func()) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) Return(_a0 *[]entities.League, _a1 error) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesName_Call) RunAndReturn(run func() (*[]entities.League, error)) *MockLeaguesRepository_GetLeaguesName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesNameActive provides a mock function with given fields:
func (_m *MockLeaguesRepository) GetLeaguesNameActive() (*[]entities.League, error) {
	ret := _m.Called()

	var r0 *[]entities.League
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entities.League, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entities.League); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.League)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesRepository_GetLeaguesNameActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesNameActive'
type MockLeaguesRepository_GetLeaguesNameActive_Call struct {
	*mock.Call
}

// GetLeaguesNameActive is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) GetLeaguesNameActive() *MockLeaguesRepository_GetLeaguesNameActive_Call {
	return &MockLeaguesRepository_GetLeaguesNameActive_Call{Call: _e.mock.On("GetLeaguesNameActive")}
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) Run(run func()) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) Return(_a0 *[]entities.League, _a1 error) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesRepository_GetLeaguesNameActive_Call) RunAndReturn(run func() (*[]entities.League, error)) *MockLeaguesRepository_GetLeaguesNameActive_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockLeaguesRepository) List() (*[]entities.League, error) {
	ret := _m.Called()

	var r0 *[]entities.League
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entities.League, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entities.League); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.League)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLeaguesRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockLeaguesRepository_Expecter) List() *MockLeaguesRepository_List_Call {
	return &MockLeaguesRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockLeaguesRepository_List_Call) Run(run func()) *MockLeaguesRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesRepository_List_Call) Return(_a0 *[]entities.League, _a1 error) *MockLeaguesRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesRepository_List_Call) RunAndReturn(run func() (*[]entities.League, error)) *MockLeaguesRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: league
func (_m *MockLeaguesRepository) Update(league *entities.League) error {
	ret := _m.Called(league)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.League) error); ok {
		r0 = rf(league)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaguesRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLeaguesRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - league *entities.League
func (_e *MockLeaguesRepository_Expecter) Update(league interface{}) *MockLeaguesRepository_Update_Call {
	return &MockLeaguesRepository_Update_Call{Call: _e.mock.On("Update", league)}
}

func (_c *MockLeaguesRepository_Update_Call) Run(run func(league *entities.League)) *MockLeaguesRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.League))
	})
	return _c
}

func (_c *MockLeaguesRepository_Update_Call) Return(_a0 error) *MockLeaguesRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesRepository_Update_Call) RunAndReturn(run func(*entities.League) error) *MockLeaguesRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLeaguesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLeaguesRepository creates a new instance of MockLeaguesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLeaguesRepository(t mockConstructorTestingTNewMockLeaguesRepository) *MockLeaguesRepository {
	mock := &MockLeaguesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
