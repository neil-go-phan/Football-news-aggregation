// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockEventRepository is an autogenerated mock type for the EventRepository type
type MockEventRepository struct {
	mock.Mock
}

type MockEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventRepository) EXPECT() *MockEventRepository_Expecter {
	return &MockEventRepository_Expecter{mock: &_m.Mock}
}

// FirstOrCreate provides a mock function with given fields: eventRepo
func (_m *MockEventRepository) FirstOrCreate(eventRepo *entities.MatchEvent) error {
	ret := _m.Called(eventRepo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.MatchEvent) error); ok {
		r0 = rf(eventRepo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventRepository_FirstOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstOrCreate'
type MockEventRepository_FirstOrCreate_Call struct {
	*mock.Call
}

// FirstOrCreate is a helper method to define mock.On call
//   - eventRepo *entities.MatchEvent
func (_e *MockEventRepository_Expecter) FirstOrCreate(eventRepo interface{}) *MockEventRepository_FirstOrCreate_Call {
	return &MockEventRepository_FirstOrCreate_Call{Call: _e.mock.On("FirstOrCreate", eventRepo)}
}

func (_c *MockEventRepository_FirstOrCreate_Call) Run(run func(eventRepo *entities.MatchEvent)) *MockEventRepository_FirstOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.MatchEvent))
	})
	return _c
}

func (_c *MockEventRepository_FirstOrCreate_Call) Return(_a0 error) *MockEventRepository_FirstOrCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventRepository_FirstOrCreate_Call) RunAndReturn(run func(*entities.MatchEvent) error) *MockEventRepository_FirstOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEventRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventRepository creates a new instance of MockEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventRepository(t mockConstructorTestingTNewMockEventRepository) *MockEventRepository {
	mock := &MockEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
