// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockTagsServices is an autogenerated mock type for the TagsServices type
type MockTagsServices struct {
	mock.Mock
}

type MockTagsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagsServices) EXPECT() *MockTagsServices_Expecter {
	return &MockTagsServices_Expecter{mock: &_m.Mock}
}

// AddTag provides a mock function with given fields: newTags
func (_m *MockTagsServices) AddTag(newTags string) error {
	ret := _m.Called(newTags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(newTags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagsServices_AddTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTag'
type MockTagsServices_AddTag_Call struct {
	*mock.Call
}

// AddTag is a helper method to define mock.On call
//   - newTags string
func (_e *MockTagsServices_Expecter) AddTag(newTags interface{}) *MockTagsServices_AddTag_Call {
	return &MockTagsServices_AddTag_Call{Call: _e.mock.On("AddTag", newTags)}
}

func (_c *MockTagsServices_AddTag_Call) Run(run func(newTags string)) *MockTagsServices_AddTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTagsServices_AddTag_Call) Return(_a0 error) *MockTagsServices_AddTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagsServices_AddTag_Call) RunAndReturn(run func(string) error) *MockTagsServices_AddTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function with given fields: tagName
func (_m *MockTagsServices) DeleteTag(tagName string) error {
	ret := _m.Called(tagName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tagName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagsServices_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockTagsServices_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - tagName string
func (_e *MockTagsServices_Expecter) DeleteTag(tagName interface{}) *MockTagsServices_DeleteTag_Call {
	return &MockTagsServices_DeleteTag_Call{Call: _e.mock.On("DeleteTag", tagName)}
}

func (_c *MockTagsServices_DeleteTag_Call) Run(run func(tagName string)) *MockTagsServices_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTagsServices_DeleteTag_Call) Return(_a0 error) *MockTagsServices_DeleteTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagsServices_DeleteTag_Call) RunAndReturn(run func(string) error) *MockTagsServices_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: tagName
func (_m *MockTagsServices) Get(tagName string) (*entities.Tag, error) {
	ret := _m.Called(tagName)

	var r0 *entities.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Tag, error)); ok {
		return rf(tagName)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Tag); ok {
		r0 = rf(tagName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tagName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagsServices_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTagsServices_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - tagName string
func (_e *MockTagsServices_Expecter) Get(tagName interface{}) *MockTagsServices_Get_Call {
	return &MockTagsServices_Get_Call{Call: _e.mock.On("Get", tagName)}
}

func (_c *MockTagsServices_Get_Call) Run(run func(tagName string)) *MockTagsServices_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTagsServices_Get_Call) Return(_a0 *entities.Tag, _a1 error) *MockTagsServices_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagsServices_Get_Call) RunAndReturn(run func(string) (*entities.Tag, error)) *MockTagsServices_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsByTagNames provides a mock function with given fields: tagNames
func (_m *MockTagsServices) GetTagsByTagNames(tagNames []string) (*[]entities.Tag, error) {
	ret := _m.Called(tagNames)

	var r0 *[]entities.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*[]entities.Tag, error)); ok {
		return rf(tagNames)
	}
	if rf, ok := ret.Get(0).(func([]string) *[]entities.Tag); ok {
		r0 = rf(tagNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tagNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagsServices_GetTagsByTagNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsByTagNames'
type MockTagsServices_GetTagsByTagNames_Call struct {
	*mock.Call
}

// GetTagsByTagNames is a helper method to define mock.On call
//   - tagNames []string
func (_e *MockTagsServices_Expecter) GetTagsByTagNames(tagNames interface{}) *MockTagsServices_GetTagsByTagNames_Call {
	return &MockTagsServices_GetTagsByTagNames_Call{Call: _e.mock.On("GetTagsByTagNames", tagNames)}
}

func (_c *MockTagsServices_GetTagsByTagNames_Call) Run(run func(tagNames []string)) *MockTagsServices_GetTagsByTagNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockTagsServices_GetTagsByTagNames_Call) Return(_a0 *[]entities.Tag, _a1 error) *MockTagsServices_GetTagsByTagNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagsServices_GetTagsByTagNames_Call) RunAndReturn(run func([]string) (*[]entities.Tag, error)) *MockTagsServices_GetTagsByTagNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsName provides a mock function with given fields:
func (_m *MockTagsServices) ListTagsName() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagsServices_ListTagsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsName'
type MockTagsServices_ListTagsName_Call struct {
	*mock.Call
}

// ListTagsName is a helper method to define mock.On call
func (_e *MockTagsServices_Expecter) ListTagsName() *MockTagsServices_ListTagsName_Call {
	return &MockTagsServices_ListTagsName_Call{Call: _e.mock.On("ListTagsName")}
}

func (_c *MockTagsServices_ListTagsName_Call) Run(run func()) *MockTagsServices_ListTagsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTagsServices_ListTagsName_Call) Return(_a0 []string, _a1 error) *MockTagsServices_ListTagsName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagsServices_ListTagsName_Call) RunAndReturn(run func() ([]string, error)) *MockTagsServices_ListTagsName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTagsServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTagsServices creates a new instance of MockTagsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTagsServices(t mockConstructorTestingTNewMockTagsServices) *MockTagsServices {
	mock := &MockTagsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
