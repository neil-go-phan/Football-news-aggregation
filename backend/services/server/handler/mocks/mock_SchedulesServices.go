// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	repository "server/repository"

	mock "github.com/stretchr/testify/mock"

	serverproto "server/proto"

	time "time"
)

// MockSchedulesServices is an autogenerated mock type for the SchedulesServices type
type MockSchedulesServices struct {
	mock.Mock
}

type MockSchedulesServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchedulesServices) EXPECT() *MockSchedulesServices_Expecter {
	return &MockSchedulesServices_Expecter{mock: &_m.Mock}
}

// ClearAllMatchURLs provides a mock function with given fields:
func (_m *MockSchedulesServices) ClearAllMatchURLs() {
	_m.Called()
}

// MockSchedulesServices_ClearAllMatchURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAllMatchURLs'
type MockSchedulesServices_ClearAllMatchURLs_Call struct {
	*mock.Call
}

// ClearAllMatchURLs is a helper method to define mock.On call
func (_e *MockSchedulesServices_Expecter) ClearAllMatchURLs() *MockSchedulesServices_ClearAllMatchURLs_Call {
	return &MockSchedulesServices_ClearAllMatchURLs_Call{Call: _e.mock.On("ClearAllMatchURLs")}
}

func (_c *MockSchedulesServices_ClearAllMatchURLs_Call) Run(run func()) *MockSchedulesServices_ClearAllMatchURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchedulesServices_ClearAllMatchURLs_Call) Return() *MockSchedulesServices_ClearAllMatchURLs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSchedulesServices_ClearAllMatchURLs_Call) RunAndReturn(run func()) *MockSchedulesServices_ClearAllMatchURLs_Call {
	_c.Call.Return(run)
	return _c
}

// ClearMatchURLsOnTime provides a mock function with given fields:
func (_m *MockSchedulesServices) ClearMatchURLsOnTime() {
	_m.Called()
}

// MockSchedulesServices_ClearMatchURLsOnTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearMatchURLsOnTime'
type MockSchedulesServices_ClearMatchURLsOnTime_Call struct {
	*mock.Call
}

// ClearMatchURLsOnTime is a helper method to define mock.On call
func (_e *MockSchedulesServices_Expecter) ClearMatchURLsOnTime() *MockSchedulesServices_ClearMatchURLsOnTime_Call {
	return &MockSchedulesServices_ClearMatchURLsOnTime_Call{Call: _e.mock.On("ClearMatchURLsOnTime")}
}

func (_c *MockSchedulesServices_ClearMatchURLsOnTime_Call) Run(run func()) *MockSchedulesServices_ClearMatchURLsOnTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchedulesServices_ClearMatchURLsOnTime_Call) Return() *MockSchedulesServices_ClearMatchURLsOnTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSchedulesServices_ClearMatchURLsOnTime_Call) RunAndReturn(run func()) *MockSchedulesServices_ClearMatchURLsOnTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMatchURLs provides a mock function with given fields:
func (_m *MockSchedulesServices) GetAllMatchURLs() repository.AllMatchURLsOnDay {
	ret := _m.Called()

	var r0 repository.AllMatchURLsOnDay
	if rf, ok := ret.Get(0).(func() repository.AllMatchURLsOnDay); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.AllMatchURLsOnDay)
	}

	return r0
}

// MockSchedulesServices_GetAllMatchURLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMatchURLs'
type MockSchedulesServices_GetAllMatchURLs_Call struct {
	*mock.Call
}

// GetAllMatchURLs is a helper method to define mock.On call
func (_e *MockSchedulesServices_Expecter) GetAllMatchURLs() *MockSchedulesServices_GetAllMatchURLs_Call {
	return &MockSchedulesServices_GetAllMatchURLs_Call{Call: _e.mock.On("GetAllMatchURLs")}
}

func (_c *MockSchedulesServices_GetAllMatchURLs_Call) Run(run func()) *MockSchedulesServices_GetAllMatchURLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchedulesServices_GetAllMatchURLs_Call) Return(_a0 repository.AllMatchURLsOnDay) *MockSchedulesServices_GetAllMatchURLs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchedulesServices_GetAllMatchURLs_Call) RunAndReturn(run func() repository.AllMatchURLsOnDay) *MockSchedulesServices_GetAllMatchURLs_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllScheduleLeagueOnDay provides a mock function with given fields: date
func (_m *MockSchedulesServices) GetAllScheduleLeagueOnDay(date time.Time) (repository.ScheduleOnDay, error) {
	ret := _m.Called(date)

	var r0 repository.ScheduleOnDay
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (repository.ScheduleOnDay, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) repository.ScheduleOnDay); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(repository.ScheduleOnDay)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchedulesServices_GetAllScheduleLeagueOnDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllScheduleLeagueOnDay'
type MockSchedulesServices_GetAllScheduleLeagueOnDay_Call struct {
	*mock.Call
}

// GetAllScheduleLeagueOnDay is a helper method to define mock.On call
//   - date time.Time
func (_e *MockSchedulesServices_Expecter) GetAllScheduleLeagueOnDay(date interface{}) *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call {
	return &MockSchedulesServices_GetAllScheduleLeagueOnDay_Call{Call: _e.mock.On("GetAllScheduleLeagueOnDay", date)}
}

func (_c *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call) Run(run func(date time.Time)) *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call) Return(_a0 repository.ScheduleOnDay, _a1 error) *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call) RunAndReturn(run func(time.Time) (repository.ScheduleOnDay, error)) *MockSchedulesServices_GetAllScheduleLeagueOnDay_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchURLsOnTime provides a mock function with given fields:
func (_m *MockSchedulesServices) GetMatchURLsOnTime() repository.MatchURLsWithTimeOnDay {
	ret := _m.Called()

	var r0 repository.MatchURLsWithTimeOnDay
	if rf, ok := ret.Get(0).(func() repository.MatchURLsWithTimeOnDay); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.MatchURLsWithTimeOnDay)
	}

	return r0
}

// MockSchedulesServices_GetMatchURLsOnTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchURLsOnTime'
type MockSchedulesServices_GetMatchURLsOnTime_Call struct {
	*mock.Call
}

// GetMatchURLsOnTime is a helper method to define mock.On call
func (_e *MockSchedulesServices_Expecter) GetMatchURLsOnTime() *MockSchedulesServices_GetMatchURLsOnTime_Call {
	return &MockSchedulesServices_GetMatchURLsOnTime_Call{Call: _e.mock.On("GetMatchURLsOnTime")}
}

func (_c *MockSchedulesServices_GetMatchURLsOnTime_Call) Run(run func()) *MockSchedulesServices_GetMatchURLsOnTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSchedulesServices_GetMatchURLsOnTime_Call) Return(_a0 repository.MatchURLsWithTimeOnDay) *MockSchedulesServices_GetMatchURLsOnTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchedulesServices_GetMatchURLsOnTime_Call) RunAndReturn(run func() repository.MatchURLsWithTimeOnDay) *MockSchedulesServices_GetMatchURLsOnTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleLeagueOnDay provides a mock function with given fields: date, league
func (_m *MockSchedulesServices) GetScheduleLeagueOnDay(date time.Time, league string) (repository.ScheduleOnDay, error) {
	ret := _m.Called(date, league)

	var r0 repository.ScheduleOnDay
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string) (repository.ScheduleOnDay, error)); ok {
		return rf(date, league)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string) repository.ScheduleOnDay); ok {
		r0 = rf(date, league)
	} else {
		r0 = ret.Get(0).(repository.ScheduleOnDay)
	}

	if rf, ok := ret.Get(1).(func(time.Time, string) error); ok {
		r1 = rf(date, league)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSchedulesServices_GetScheduleLeagueOnDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleLeagueOnDay'
type MockSchedulesServices_GetScheduleLeagueOnDay_Call struct {
	*mock.Call
}

// GetScheduleLeagueOnDay is a helper method to define mock.On call
//   - date time.Time
//   - league string
func (_e *MockSchedulesServices_Expecter) GetScheduleLeagueOnDay(date interface{}, league interface{}) *MockSchedulesServices_GetScheduleLeagueOnDay_Call {
	return &MockSchedulesServices_GetScheduleLeagueOnDay_Call{Call: _e.mock.On("GetScheduleLeagueOnDay", date, league)}
}

func (_c *MockSchedulesServices_GetScheduleLeagueOnDay_Call) Run(run func(date time.Time, league string)) *MockSchedulesServices_GetScheduleLeagueOnDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string))
	})
	return _c
}

func (_c *MockSchedulesServices_GetScheduleLeagueOnDay_Call) Return(_a0 repository.ScheduleOnDay, _a1 error) *MockSchedulesServices_GetScheduleLeagueOnDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSchedulesServices_GetScheduleLeagueOnDay_Call) RunAndReturn(run func(time.Time, string) (repository.ScheduleOnDay, error)) *MockSchedulesServices_GetScheduleLeagueOnDay_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedules provides a mock function with given fields: date
func (_m *MockSchedulesServices) GetSchedules(date string) {
	_m.Called(date)
}

// MockSchedulesServices_GetSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedules'
type MockSchedulesServices_GetSchedules_Call struct {
	*mock.Call
}

// GetSchedules is a helper method to define mock.On call
//   - date string
func (_e *MockSchedulesServices_Expecter) GetSchedules(date interface{}) *MockSchedulesServices_GetSchedules_Call {
	return &MockSchedulesServices_GetSchedules_Call{Call: _e.mock.On("GetSchedules", date)}
}

func (_c *MockSchedulesServices_GetSchedules_Call) Run(run func(date string)) *MockSchedulesServices_GetSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSchedulesServices_GetSchedules_Call) Return() *MockSchedulesServices_GetSchedules_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSchedulesServices_GetSchedules_Call) RunAndReturn(run func(string)) *MockSchedulesServices_GetSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// SignalMatchDetailServiceToCrawl provides a mock function with given fields: matchURLs
func (_m *MockSchedulesServices) SignalMatchDetailServiceToCrawl(matchURLs repository.AllMatchURLsOnDay) []*serverproto.MatchDetail {
	ret := _m.Called(matchURLs)

	var r0 []*serverproto.MatchDetail
	if rf, ok := ret.Get(0).(func(repository.AllMatchURLsOnDay) []*serverproto.MatchDetail); ok {
		r0 = rf(matchURLs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*serverproto.MatchDetail)
		}
	}

	return r0
}

// MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalMatchDetailServiceToCrawl'
type MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call struct {
	*mock.Call
}

// SignalMatchDetailServiceToCrawl is a helper method to define mock.On call
//   - matchURLs repository.AllMatchURLsOnDay
func (_e *MockSchedulesServices_Expecter) SignalMatchDetailServiceToCrawl(matchURLs interface{}) *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call {
	return &MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call{Call: _e.mock.On("SignalMatchDetailServiceToCrawl", matchURLs)}
}

func (_c *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call) Run(run func(matchURLs repository.AllMatchURLsOnDay)) *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.AllMatchURLsOnDay))
	})
	return _c
}

func (_c *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call) Return(_a0 []*serverproto.MatchDetail) *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call) RunAndReturn(run func(repository.AllMatchURLsOnDay) []*serverproto.MatchDetail) *MockSchedulesServices_SignalMatchDetailServiceToCrawl_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockSchedulesServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSchedulesServices creates a new instance of MockSchedulesServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSchedulesServices(t mockConstructorTestingTNewMockSchedulesServices) *MockSchedulesServices {
	mock := &MockSchedulesServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
