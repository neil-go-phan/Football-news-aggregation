// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	"server/services"
	mock "github.com/stretchr/testify/mock"
)

// MockArticleServices is an autogenerated mock type for the ArticleServices type
type MockArticleServices struct {
	mock.Mock
}

type MockArticleServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArticleServices) EXPECT() *MockArticleServices_Expecter {
	return &MockArticleServices_Expecter{mock: &_m.Mock}
}

// AddTagForAllArticle provides a mock function with given fields: tag
func (_m *MockArticleServices) AddTagForAllArticle(tag string) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleServices_AddTagForAllArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagForAllArticle'
type MockArticleServices_AddTagForAllArticle_Call struct {
	*mock.Call
}

// AddTagForAllArticle is a helper method to define mock.On call
//   - tag string
func (_e *MockArticleServices_Expecter) AddTagForAllArticle(tag interface{}) *MockArticleServices_AddTagForAllArticle_Call {
	return &MockArticleServices_AddTagForAllArticle_Call{Call: _e.mock.On("AddTagForAllArticle", tag)}
}

func (_c *MockArticleServices_AddTagForAllArticle_Call) Run(run func(tag string)) *MockArticleServices_AddTagForAllArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockArticleServices_AddTagForAllArticle_Call) Return(_a0 error) *MockArticleServices_AddTagForAllArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleServices_AddTagForAllArticle_Call) RunAndReturn(run func(string) error) *MockArticleServices_AddTagForAllArticle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArticle provides a mock function with given fields: id
func (_m *MockArticleServices) DeleteArticle(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArticleServices_DeleteArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArticle'
type MockArticleServices_DeleteArticle_Call struct {
	*mock.Call
}

// DeleteArticle is a helper method to define mock.On call
//   - id uint
func (_e *MockArticleServices_Expecter) DeleteArticle(id interface{}) *MockArticleServices_DeleteArticle_Call {
	return &MockArticleServices_DeleteArticle_Call{Call: _e.mock.On("DeleteArticle", id)}
}

func (_c *MockArticleServices_DeleteArticle_Call) Run(run func(id uint)) *MockArticleServices_DeleteArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockArticleServices_DeleteArticle_Call) Return(_a0 error) *MockArticleServices_DeleteArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArticleServices_DeleteArticle_Call) RunAndReturn(run func(uint) error) *MockArticleServices_DeleteArticle_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleCount provides a mock function with given fields:
func (_m *MockArticleServices) GetArticleCount() (int64, int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServices_GetArticleCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleCount'
type MockArticleServices_GetArticleCount_Call struct {
	*mock.Call
}

// GetArticleCount is a helper method to define mock.On call
func (_e *MockArticleServices_Expecter) GetArticleCount() *MockArticleServices_GetArticleCount_Call {
	return &MockArticleServices_GetArticleCount_Call{Call: _e.mock.On("GetArticleCount")}
}

func (_c *MockArticleServices_GetArticleCount_Call) Run(run func()) *MockArticleServices_GetArticleCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockArticleServices_GetArticleCount_Call) Return(total int64, today int64, err error) *MockArticleServices_GetArticleCount_Call {
	_c.Call.Return(total, today, err)
	return _c
}

func (_c *MockArticleServices_GetArticleCount_Call) RunAndReturn(run func() (int64, int64, error)) *MockArticleServices_GetArticleCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticles provides a mock function with given fields: keywords
func (_m *MockArticleServices) GetArticles(keywords []string) {
	_m.Called(keywords)
}

// MockArticleServices_GetArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticles'
type MockArticleServices_GetArticles_Call struct {
	*mock.Call
}

// GetArticles is a helper method to define mock.On call
//   - keywords []string
func (_e *MockArticleServices_Expecter) GetArticles(keywords interface{}) *MockArticleServices_GetArticles_Call {
	return &MockArticleServices_GetArticles_Call{Call: _e.mock.On("GetArticles", keywords)}
}

func (_c *MockArticleServices_GetArticles_Call) Run(run func(keywords []string)) *MockArticleServices_GetArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockArticleServices_GetArticles_Call) Return() *MockArticleServices_GetArticles_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockArticleServices_GetArticles_Call) RunAndReturn(run func([]string)) *MockArticleServices_GetArticles_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstPageOfLeagueRelatedArticle provides a mock function with given fields: leagueName
func (_m *MockArticleServices) GetFirstPageOfLeagueRelatedArticle(leagueName string) ([]services.ArticleCache, error) {
	ret := _m.Called(leagueName)

	var r0 []services.ArticleCache
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]services.ArticleCache, error)); ok {
		return rf(leagueName)
	}
	if rf, ok := ret.Get(0).(func(string) []services.ArticleCache); ok {
		r0 = rf(leagueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]services.ArticleCache)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(leagueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstPageOfLeagueRelatedArticle'
type MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call struct {
	*mock.Call
}

// GetFirstPageOfLeagueRelatedArticle is a helper method to define mock.On call
//   - leagueName string
func (_e *MockArticleServices_Expecter) GetFirstPageOfLeagueRelatedArticle(leagueName interface{}) *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call {
	return &MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call{Call: _e.mock.On("GetFirstPageOfLeagueRelatedArticle", leagueName)}
}

func (_c *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call) Run(run func(leagueName string)) *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call) Return(_a0 []services.ArticleCache, _a1 error) *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call) RunAndReturn(run func(string) ([]services.ArticleCache, error)) *MockArticleServices_GetFirstPageOfLeagueRelatedArticle_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshCache provides a mock function with given fields:
func (_m *MockArticleServices) RefreshCache() {
	_m.Called()
}

// MockArticleServices_RefreshCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshCache'
type MockArticleServices_RefreshCache_Call struct {
	*mock.Call
}

// RefreshCache is a helper method to define mock.On call
func (_e *MockArticleServices_Expecter) RefreshCache() *MockArticleServices_RefreshCache_Call {
	return &MockArticleServices_RefreshCache_Call{Call: _e.mock.On("RefreshCache")}
}

func (_c *MockArticleServices_RefreshCache_Call) Run(run func()) *MockArticleServices_RefreshCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockArticleServices_RefreshCache_Call) Return() *MockArticleServices_RefreshCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockArticleServices_RefreshCache_Call) RunAndReturn(run func()) *MockArticleServices_RefreshCache_Call {
	_c.Call.Return(run)
	return _c
}

// SearchArticles provides a mock function with given fields: keyword, formatedTags, from
func (_m *MockArticleServices) SearchArticles(keyword string, formatedTags []string, from int) ([]entities.Article, int64, error) {
	ret := _m.Called(keyword, formatedTags, from)

	var r0 []entities.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, []string, int) ([]entities.Article, int64, error)); ok {
		return rf(keyword, formatedTags, from)
	}
	if rf, ok := ret.Get(0).(func(string, []string, int) []entities.Article); ok {
		r0 = rf(keyword, formatedTags, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string, int) int64); ok {
		r1 = rf(keyword, formatedTags, from)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, []string, int) error); ok {
		r2 = rf(keyword, formatedTags, from)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArticleServices_SearchArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchArticles'
type MockArticleServices_SearchArticles_Call struct {
	*mock.Call
}

// SearchArticles is a helper method to define mock.On call
//   - keyword string
//   - formatedTags []string
//   - from int
func (_e *MockArticleServices_Expecter) SearchArticles(keyword interface{}, formatedTags interface{}, from interface{}) *MockArticleServices_SearchArticles_Call {
	return &MockArticleServices_SearchArticles_Call{Call: _e.mock.On("SearchArticles", keyword, formatedTags, from)}
}

func (_c *MockArticleServices_SearchArticles_Call) Run(run func(keyword string, formatedTags []string, from int)) *MockArticleServices_SearchArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int))
	})
	return _c
}

func (_c *MockArticleServices_SearchArticles_Call) Return(_a0 []entities.Article, _a1 int64, _a2 error) *MockArticleServices_SearchArticles_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockArticleServices_SearchArticles_Call) RunAndReturn(run func(string, []string, int) ([]entities.Article, int64, error)) *MockArticleServices_SearchArticles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockArticleServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArticleServices creates a new instance of MockArticleServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArticleServices(t mockConstructorTestingTNewMockArticleServices) *MockArticleServices {
	mock := &MockArticleServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
