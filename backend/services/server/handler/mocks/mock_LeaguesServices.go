// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockLeaguesServices is an autogenerated mock type for the LeaguesServices type
type MockLeaguesServices struct {
	mock.Mock
}

type MockLeaguesServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLeaguesServices) EXPECT() *MockLeaguesServices_Expecter {
	return &MockLeaguesServices_Expecter{mock: &_m.Mock}
}

// ChangeStatus provides a mock function with given fields: leagueName
func (_m *MockLeaguesServices) ChangeStatus(leagueName string) (bool, error) {
	ret := _m.Called(leagueName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(leagueName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(leagueName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(leagueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesServices_ChangeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeStatus'
type MockLeaguesServices_ChangeStatus_Call struct {
	*mock.Call
}

// ChangeStatus is a helper method to define mock.On call
//   - leagueName string
func (_e *MockLeaguesServices_Expecter) ChangeStatus(leagueName interface{}) *MockLeaguesServices_ChangeStatus_Call {
	return &MockLeaguesServices_ChangeStatus_Call{Call: _e.mock.On("ChangeStatus", leagueName)}
}

func (_c *MockLeaguesServices_ChangeStatus_Call) Run(run func(leagueName string)) *MockLeaguesServices_ChangeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLeaguesServices_ChangeStatus_Call) Return(_a0 bool, _a1 error) *MockLeaguesServices_ChangeStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesServices_ChangeStatus_Call) RunAndReturn(run func(string) (bool, error)) *MockLeaguesServices_ChangeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeague provides a mock function with given fields: newLeaguesName
func (_m *MockLeaguesServices) CreateLeague(newLeaguesName string) error {
	ret := _m.Called(newLeaguesName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(newLeaguesName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLeaguesServices_CreateLeague_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeague'
type MockLeaguesServices_CreateLeague_Call struct {
	*mock.Call
}

// CreateLeague is a helper method to define mock.On call
//   - newLeaguesName string
func (_e *MockLeaguesServices_Expecter) CreateLeague(newLeaguesName interface{}) *MockLeaguesServices_CreateLeague_Call {
	return &MockLeaguesServices_CreateLeague_Call{Call: _e.mock.On("CreateLeague", newLeaguesName)}
}

func (_c *MockLeaguesServices_CreateLeague_Call) Run(run func(newLeaguesName string)) *MockLeaguesServices_CreateLeague_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLeaguesServices_CreateLeague_Call) Return(_a0 error) *MockLeaguesServices_CreateLeague_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLeaguesServices_CreateLeague_Call) RunAndReturn(run func(string) error) *MockLeaguesServices_CreateLeague_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesName provides a mock function with given fields:
func (_m *MockLeaguesServices) GetLeaguesName() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesServices_GetLeaguesName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesName'
type MockLeaguesServices_GetLeaguesName_Call struct {
	*mock.Call
}

// GetLeaguesName is a helper method to define mock.On call
func (_e *MockLeaguesServices_Expecter) GetLeaguesName() *MockLeaguesServices_GetLeaguesName_Call {
	return &MockLeaguesServices_GetLeaguesName_Call{Call: _e.mock.On("GetLeaguesName")}
}

func (_c *MockLeaguesServices_GetLeaguesName_Call) Run(run func()) *MockLeaguesServices_GetLeaguesName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesServices_GetLeaguesName_Call) Return(_a0 []string, _a1 error) *MockLeaguesServices_GetLeaguesName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesServices_GetLeaguesName_Call) RunAndReturn(run func() ([]string, error)) *MockLeaguesServices_GetLeaguesName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaguesNameActive provides a mock function with given fields:
func (_m *MockLeaguesServices) GetLeaguesNameActive() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesServices_GetLeaguesNameActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaguesNameActive'
type MockLeaguesServices_GetLeaguesNameActive_Call struct {
	*mock.Call
}

// GetLeaguesNameActive is a helper method to define mock.On call
func (_e *MockLeaguesServices_Expecter) GetLeaguesNameActive() *MockLeaguesServices_GetLeaguesNameActive_Call {
	return &MockLeaguesServices_GetLeaguesNameActive_Call{Call: _e.mock.On("GetLeaguesNameActive")}
}

func (_c *MockLeaguesServices_GetLeaguesNameActive_Call) Run(run func()) *MockLeaguesServices_GetLeaguesNameActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesServices_GetLeaguesNameActive_Call) Return(_a0 []string, _a1 error) *MockLeaguesServices_GetLeaguesNameActive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesServices_GetLeaguesNameActive_Call) RunAndReturn(run func() ([]string, error)) *MockLeaguesServices_GetLeaguesNameActive_Call {
	_c.Call.Return(run)
	return _c
}

// ListLeagues provides a mock function with given fields:
func (_m *MockLeaguesServices) ListLeagues() (*[]entities.League, error) {
	ret := _m.Called()

	var r0 *[]entities.League
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entities.League, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entities.League); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.League)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLeaguesServices_ListLeagues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLeagues'
type MockLeaguesServices_ListLeagues_Call struct {
	*mock.Call
}

// ListLeagues is a helper method to define mock.On call
func (_e *MockLeaguesServices_Expecter) ListLeagues() *MockLeaguesServices_ListLeagues_Call {
	return &MockLeaguesServices_ListLeagues_Call{Call: _e.mock.On("ListLeagues")}
}

func (_c *MockLeaguesServices_ListLeagues_Call) Run(run func()) *MockLeaguesServices_ListLeagues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLeaguesServices_ListLeagues_Call) Return(_a0 *[]entities.League, _a1 error) *MockLeaguesServices_ListLeagues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLeaguesServices_ListLeagues_Call) RunAndReturn(run func() (*[]entities.League, error)) *MockLeaguesServices_ListLeagues_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLeaguesServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLeaguesServices creates a new instance of MockLeaguesServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLeaguesServices(t mockConstructorTestingTNewMockLeaguesServices) *MockLeaguesServices {
	mock := &MockLeaguesServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
