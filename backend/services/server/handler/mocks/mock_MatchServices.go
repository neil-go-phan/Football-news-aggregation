// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "server/entities"
	repository "server/repository"

	mock "github.com/stretchr/testify/mock"

	serverproto "server/proto"

	time "time"
)

// MockMatchServices is an autogenerated mock type for the MatchServices type
type MockMatchServices struct {
	mock.Mock
}

type MockMatchServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchServices) EXPECT() *MockMatchServices_Expecter {
	return &MockMatchServices_Expecter{mock: &_m.Mock}
}

// GetLineUps provides a mock function with given fields: id1, id2
func (_m *MockMatchServices) GetLineUps(id1 uint, id2 uint) (*entities.MatchLineUp, *entities.MatchLineUp, error) {
	ret := _m.Called(id1, id2)

	var r0 *entities.MatchLineUp
	var r1 *entities.MatchLineUp
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*entities.MatchLineUp, *entities.MatchLineUp, error)); ok {
		return rf(id1, id2)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *entities.MatchLineUp); ok {
		r0 = rf(id1, id2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) *entities.MatchLineUp); ok {
		r1 = rf(id1, id2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.MatchLineUp)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(id1, id2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMatchServices_GetLineUps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLineUps'
type MockMatchServices_GetLineUps_Call struct {
	*mock.Call
}

// GetLineUps is a helper method to define mock.On call
//   - id1 uint
//   - id2 uint
func (_e *MockMatchServices_Expecter) GetLineUps(id1 interface{}, id2 interface{}) *MockMatchServices_GetLineUps_Call {
	return &MockMatchServices_GetLineUps_Call{Call: _e.mock.On("GetLineUps", id1, id2)}
}

func (_c *MockMatchServices_GetLineUps_Call) Run(run func(id1 uint, id2 uint)) *MockMatchServices_GetLineUps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockMatchServices_GetLineUps_Call) Return(_a0 *entities.MatchLineUp, _a1 *entities.MatchLineUp, _a2 error) *MockMatchServices_GetLineUps_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMatchServices_GetLineUps_Call) RunAndReturn(run func(uint, uint) (*entities.MatchLineUp, *entities.MatchLineUp, error)) *MockMatchServices_GetLineUps_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatch provides a mock function with given fields: date, club1Name, club2Name
func (_m *MockMatchServices) GetMatch(date time.Time, club1Name string, club2Name string) (*entities.Match, error) {
	ret := _m.Called(date, club1Name, club2Name)

	var r0 *entities.Match
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string, string) (*entities.Match, error)); ok {
		return rf(date, club1Name, club2Name)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string, string) *entities.Match); ok {
		r0 = rf(date, club1Name, club2Name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Match)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, string, string) error); ok {
		r1 = rf(date, club1Name, club2Name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchServices_GetMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatch'
type MockMatchServices_GetMatch_Call struct {
	*mock.Call
}

// GetMatch is a helper method to define mock.On call
//   - date time.Time
//   - club1Name string
//   - club2Name string
func (_e *MockMatchServices_Expecter) GetMatch(date interface{}, club1Name interface{}, club2Name interface{}) *MockMatchServices_GetMatch_Call {
	return &MockMatchServices_GetMatch_Call{Call: _e.mock.On("GetMatch", date, club1Name, club2Name)}
}

func (_c *MockMatchServices_GetMatch_Call) Run(run func(date time.Time, club1Name string, club2Name string)) *MockMatchServices_GetMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMatchServices_GetMatch_Call) Return(_a0 *entities.Match, _a1 error) *MockMatchServices_GetMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchServices_GetMatch_Call) RunAndReturn(run func(time.Time, string, string) (*entities.Match, error)) *MockMatchServices_GetMatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchDetailsOnDayFromCrawler provides a mock function with given fields: matchURLs
func (_m *MockMatchServices) GetMatchDetailsOnDayFromCrawler(matchURLs repository.AllMatchURLsOnDay) []*serverproto.MatchDetail {
	ret := _m.Called(matchURLs)

	var r0 []*serverproto.MatchDetail
	if rf, ok := ret.Get(0).(func(repository.AllMatchURLsOnDay) []*serverproto.MatchDetail); ok {
		r0 = rf(matchURLs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*serverproto.MatchDetail)
		}
	}

	return r0
}

// MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchDetailsOnDayFromCrawler'
type MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call struct {
	*mock.Call
}

// GetMatchDetailsOnDayFromCrawler is a helper method to define mock.On call
//   - matchURLs repository.AllMatchURLsOnDay
func (_e *MockMatchServices_Expecter) GetMatchDetailsOnDayFromCrawler(matchURLs interface{}) *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call {
	return &MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call{Call: _e.mock.On("GetMatchDetailsOnDayFromCrawler", matchURLs)}
}

func (_c *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call) Run(run func(matchURLs repository.AllMatchURLsOnDay)) *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.AllMatchURLsOnDay))
	})
	return _c
}

func (_c *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call) Return(_a0 []*serverproto.MatchDetail) *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call) RunAndReturn(run func(repository.AllMatchURLsOnDay) []*serverproto.MatchDetail) *MockMatchServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Return(run)
	return _c
}

// StoreMatch_MatchDetailCrawl provides a mock function with given fields: resp, date
func (_m *MockMatchServices) StoreMatch_MatchDetailCrawl(resp *serverproto.MatchDetail, date time.Time) error {
	ret := _m.Called(resp, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(*serverproto.MatchDetail, time.Time) error); ok {
		r0 = rf(resp, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchServices_StoreMatch_MatchDetailCrawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMatch_MatchDetailCrawl'
type MockMatchServices_StoreMatch_MatchDetailCrawl_Call struct {
	*mock.Call
}

// StoreMatch_MatchDetailCrawl is a helper method to define mock.On call
//   - resp *serverproto.MatchDetail
//   - date time.Time
func (_e *MockMatchServices_Expecter) StoreMatch_MatchDetailCrawl(resp interface{}, date interface{}) *MockMatchServices_StoreMatch_MatchDetailCrawl_Call {
	return &MockMatchServices_StoreMatch_MatchDetailCrawl_Call{Call: _e.mock.On("StoreMatch_MatchDetailCrawl", resp, date)}
}

func (_c *MockMatchServices_StoreMatch_MatchDetailCrawl_Call) Run(run func(resp *serverproto.MatchDetail, date time.Time)) *MockMatchServices_StoreMatch_MatchDetailCrawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*serverproto.MatchDetail), args[1].(time.Time))
	})
	return _c
}

func (_c *MockMatchServices_StoreMatch_MatchDetailCrawl_Call) Return(_a0 error) *MockMatchServices_StoreMatch_MatchDetailCrawl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchServices_StoreMatch_MatchDetailCrawl_Call) RunAndReturn(run func(*serverproto.MatchDetail, time.Time) error) *MockMatchServices_StoreMatch_MatchDetailCrawl_Call {
	_c.Call.Return(run)
	return _c
}

// StoreMatch_ScheduleCrawl provides a mock function with given fields: match, ID, date
func (_m *MockMatchServices) StoreMatch_ScheduleCrawl(match entities.Match, ID uint, date time.Time) error {
	ret := _m.Called(match, ID, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Match, uint, time.Time) error); ok {
		r0 = rf(match, ID, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchServices_StoreMatch_ScheduleCrawl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMatch_ScheduleCrawl'
type MockMatchServices_StoreMatch_ScheduleCrawl_Call struct {
	*mock.Call
}

// StoreMatch_ScheduleCrawl is a helper method to define mock.On call
//   - match entities.Match
//   - ID uint
//   - date time.Time
func (_e *MockMatchServices_Expecter) StoreMatch_ScheduleCrawl(match interface{}, ID interface{}, date interface{}) *MockMatchServices_StoreMatch_ScheduleCrawl_Call {
	return &MockMatchServices_StoreMatch_ScheduleCrawl_Call{Call: _e.mock.On("StoreMatch_ScheduleCrawl", match, ID, date)}
}

func (_c *MockMatchServices_StoreMatch_ScheduleCrawl_Call) Run(run func(match entities.Match, ID uint, date time.Time)) *MockMatchServices_StoreMatch_ScheduleCrawl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Match), args[1].(uint), args[2].(time.Time))
	})
	return _c
}

func (_c *MockMatchServices_StoreMatch_ScheduleCrawl_Call) Return(_a0 error) *MockMatchServices_StoreMatch_ScheduleCrawl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchServices_StoreMatch_ScheduleCrawl_Call) RunAndReturn(run func(entities.Match, uint, time.Time) error) *MockMatchServices_StoreMatch_ScheduleCrawl_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMatchServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMatchServices creates a new instance of MockMatchServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMatchServices(t mockConstructorTestingTNewMockMatchServices) *MockMatchServices {
	mock := &MockMatchServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
