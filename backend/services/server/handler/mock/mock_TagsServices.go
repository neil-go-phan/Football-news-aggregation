// Code generated by mockery v2.20.0. DO NOT EDIT.

package services

import (
	entities "server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockTagsServices is an autogenerated mock type for the TagsServices type
type MockTagsServices struct {
	mock.Mock
}

type MockTagsServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagsServices) EXPECT() *MockTagsServices_Expecter {
	return &MockTagsServices_Expecter{mock: &_m.Mock}
}

// AddTag provides a mock function with given fields: newTags
func (_m *MockTagsServices) AddTag(newTags string) error {
	ret := _m.Called(newTags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(newTags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagsServices_AddTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTag'
type MockTagsServices_AddTag_Call struct {
	*mock.Call
}

// AddTag is a helper method to define mock.On call
//   - newTags string
func (_e *MockTagsServices_Expecter) AddTag(newTags interface{}) *MockTagsServices_AddTag_Call {
	return &MockTagsServices_AddTag_Call{Call: _e.mock.On("AddTag", newTags)}
}

func (_c *MockTagsServices_AddTag_Call) Run(run func(newTags string)) *MockTagsServices_AddTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTagsServices_AddTag_Call) Return(_a0 error) *MockTagsServices_AddTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagsServices_AddTag_Call) RunAndReturn(run func(string) error) *MockTagsServices_AddTag_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function with given fields: tag
func (_m *MockTagsServices) DeleteTag(tag string) error {
	ret := _m.Called(tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagsServices_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockTagsServices_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - tag string
func (_e *MockTagsServices_Expecter) DeleteTag(tag interface{}) *MockTagsServices_DeleteTag_Call {
	return &MockTagsServices_DeleteTag_Call{Call: _e.mock.On("DeleteTag", tag)}
}

func (_c *MockTagsServices_DeleteTag_Call) Run(run func(tag string)) *MockTagsServices_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTagsServices_DeleteTag_Call) Return(_a0 error) *MockTagsServices_DeleteTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagsServices_DeleteTag_Call) RunAndReturn(run func(string) error) *MockTagsServices_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function with given fields:
func (_m *MockTagsServices) ListTags() entities.Tags {
	ret := _m.Called()

	var r0 entities.Tags
	if rf, ok := ret.Get(0).(func() entities.Tags); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entities.Tags)
	}

	return r0
}

// MockTagsServices_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type MockTagsServices_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
func (_e *MockTagsServices_Expecter) ListTags() *MockTagsServices_ListTags_Call {
	return &MockTagsServices_ListTags_Call{Call: _e.mock.On("ListTags")}
}

func (_c *MockTagsServices_ListTags_Call) Run(run func()) *MockTagsServices_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTagsServices_ListTags_Call) Return(_a0 entities.Tags) *MockTagsServices_ListTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagsServices_ListTags_Call) RunAndReturn(run func() entities.Tags) *MockTagsServices_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTagsServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTagsServices creates a new instance of MockTagsServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTagsServices(t mockConstructorTestingTNewMockTagsServices) *MockTagsServices {
	mock := &MockTagsServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
