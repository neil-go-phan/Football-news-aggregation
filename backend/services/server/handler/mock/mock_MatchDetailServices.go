// Code generated by mockery v2.20.0. DO NOT EDIT.

package services

import (
	entities "server/entities"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMatchDetailServices is an autogenerated mock type for the MatchDetailServices type
type MockMatchDetailServices struct {
	mock.Mock
}

type MockMatchDetailServices_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchDetailServices) EXPECT() *MockMatchDetailServices_Expecter {
	return &MockMatchDetailServices_Expecter{mock: &_m.Mock}
}

// GetMatchDetail provides a mock function with given fields: date, club1Name, club2Name
func (_m *MockMatchDetailServices) GetMatchDetail(date time.Time, club1Name string, club2Name string) (entities.MatchDetail, error) {
	ret := _m.Called(date, club1Name, club2Name)

	var r0 entities.MatchDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string, string) (entities.MatchDetail, error)); ok {
		return rf(date, club1Name, club2Name)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string, string) entities.MatchDetail); ok {
		r0 = rf(date, club1Name, club2Name)
	} else {
		r0 = ret.Get(0).(entities.MatchDetail)
	}

	if rf, ok := ret.Get(1).(func(time.Time, string, string) error); ok {
		r1 = rf(date, club1Name, club2Name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMatchDetailServices_GetMatchDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchDetail'
type MockMatchDetailServices_GetMatchDetail_Call struct {
	*mock.Call
}

// GetMatchDetail is a helper method to define mock.On call
//   - date time.Time
//   - club1Name string
//   - club2Name string
func (_e *MockMatchDetailServices_Expecter) GetMatchDetail(date interface{}, club1Name interface{}, club2Name interface{}) *MockMatchDetailServices_GetMatchDetail_Call {
	return &MockMatchDetailServices_GetMatchDetail_Call{Call: _e.mock.On("GetMatchDetail", date, club1Name, club2Name)}
}

func (_c *MockMatchDetailServices_GetMatchDetail_Call) Run(run func(date time.Time, club1Name string, club2Name string)) *MockMatchDetailServices_GetMatchDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMatchDetailServices_GetMatchDetail_Call) Return(_a0 entities.MatchDetail, _a1 error) *MockMatchDetailServices_GetMatchDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMatchDetailServices_GetMatchDetail_Call) RunAndReturn(run func(time.Time, string, string) (entities.MatchDetail, error)) *MockMatchDetailServices_GetMatchDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchDetailsOnDayFromCrawler provides a mock function with given fields: matchURLs
func (_m *MockMatchDetailServices) GetMatchDetailsOnDayFromCrawler(matchURLs entities.MatchURLsOnDay) {
	_m.Called(matchURLs)
}

// MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchDetailsOnDayFromCrawler'
type MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call struct {
	*mock.Call
}

// GetMatchDetailsOnDayFromCrawler is a helper method to define mock.On call
//   - matchURLs entities.MatchURLsOnDay
func (_e *MockMatchDetailServices_Expecter) GetMatchDetailsOnDayFromCrawler(matchURLs interface{}) *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call {
	return &MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call{Call: _e.mock.On("GetMatchDetailsOnDayFromCrawler", matchURLs)}
}

func (_c *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call) Run(run func(matchURLs entities.MatchURLsOnDay)) *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.MatchURLsOnDay))
	})
	return _c
}

func (_c *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call) Return() *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call) RunAndReturn(run func(entities.MatchURLsOnDay)) *MockMatchDetailServices_GetMatchDetailsOnDayFromCrawler_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMatchDetailServices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMatchDetailServices creates a new instance of MockMatchDetailServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMatchDetailServices(t mockConstructorTestingTNewMockMatchDetailServices) *MockMatchDetailServices {
	mock := &MockMatchDetailServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
