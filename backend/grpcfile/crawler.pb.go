// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.6.1
// source: crawler.proto

package grpcfile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing leagues and html class
type KeywordToSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword []string `protobuf:"bytes,1,rep,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *KeywordToSearch) Reset() {
	*x = KeywordToSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordToSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordToSearch) ProtoMessage() {}

func (x *KeywordToSearch) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordToSearch.ProtoReflect.Descriptor instead.
func (*KeywordToSearch) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{0}
}

func (x *KeywordToSearch) GetKeyword() []string {
	if x != nil {
		return x.Keyword
	}
	return nil
}

type ConfigCrawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	List         string `protobuf:"bytes,2,opt,name=list,proto3" json:"list,omitempty"`
	Div          string `protobuf:"bytes,3,opt,name=div,proto3" json:"div,omitempty"`
	Title        string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Link         string `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	NextPage     string `protobuf:"bytes,7,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	NetxPageType string `protobuf:"bytes,8,opt,name=netx_page_type,json=netxPageType,proto3" json:"netx_page_type,omitempty"`
}

func (x *ConfigCrawler) Reset() {
	*x = ConfigCrawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigCrawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigCrawler) ProtoMessage() {}

func (x *ConfigCrawler) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigCrawler.ProtoReflect.Descriptor instead.
func (*ConfigCrawler) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigCrawler) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConfigCrawler) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *ConfigCrawler) GetDiv() string {
	if x != nil {
		return x.Div
	}
	return ""
}

func (x *ConfigCrawler) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ConfigCrawler) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigCrawler) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *ConfigCrawler) GetNextPage() string {
	if x != nil {
		return x.NextPage
	}
	return ""
}

func (x *ConfigCrawler) GetNetxPageType() string {
	if x != nil {
		return x.NetxPageType
	}
	return ""
}

type ArticleAddedCrawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ArticleAddedCrawler) Reset() {
	*x = ArticleAddedCrawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleAddedCrawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleAddedCrawler) ProtoMessage() {}

func (x *ArticleAddedCrawler) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleAddedCrawler.ProtoReflect.Descriptor instead.
func (*ArticleAddedCrawler) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{2}
}

func (x *ArticleAddedCrawler) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Link        string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{3}
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Article) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// The response message containing the articles
type ArticlesReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	League   string     `protobuf:"bytes,1,opt,name=league,proto3" json:"league,omitempty"`
	Articles []*Article `protobuf:"bytes,2,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ArticlesReponse) Reset() {
	*x = ArticlesReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticlesReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticlesReponse) ProtoMessage() {}

func (x *ArticlesReponse) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticlesReponse.ProtoReflect.Descriptor instead.
func (*ArticlesReponse) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{4}
}

func (x *ArticlesReponse) GetLeague() string {
	if x != nil {
		return x.League
	}
	return ""
}

func (x *ArticlesReponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

type SchedulesReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateFormated      string              `protobuf:"bytes,1,opt,name=date_formated,json=dateFormated,proto3" json:"date_formated,omitempty"`
	ScheduleOnLeagues []*ScheduleOnLeague `protobuf:"bytes,2,rep,name=schedule_on_leagues,json=scheduleOnLeagues,proto3" json:"schedule_on_leagues,omitempty"`
}

func (x *SchedulesReponse) Reset() {
	*x = SchedulesReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulesReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulesReponse) ProtoMessage() {}

func (x *SchedulesReponse) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulesReponse.ProtoReflect.Descriptor instead.
func (*SchedulesReponse) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{5}
}

func (x *SchedulesReponse) GetDateFormated() string {
	if x != nil {
		return x.DateFormated
	}
	return ""
}

func (x *SchedulesReponse) GetScheduleOnLeagues() []*ScheduleOnLeague {
	if x != nil {
		return x.ScheduleOnLeagues
	}
	return nil
}

type ScheduleOnLeague struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueName string   `protobuf:"bytes,1,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	Matches    []*Match `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *ScheduleOnLeague) Reset() {
	*x = ScheduleOnLeague{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleOnLeague) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleOnLeague) ProtoMessage() {}

func (x *ScheduleOnLeague) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleOnLeague.ProtoReflect.Descriptor instead.
func (*ScheduleOnLeague) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleOnLeague) GetLeagueName() string {
	if x != nil {
		return x.LeagueName
	}
	return ""
}

func (x *ScheduleOnLeague) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Round           string `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	Club_1          *Club  `protobuf:"bytes,3,opt,name=club_1,json=club1,proto3" json:"club_1,omitempty"`
	Club_2          *Club  `protobuf:"bytes,4,opt,name=club_2,json=club2,proto3" json:"club_2,omitempty"`
	Scores          string `protobuf:"bytes,6,opt,name=scores,proto3" json:"scores,omitempty"`
	MatchDetailLink string `protobuf:"bytes,7,opt,name=match_detail_link,json=matchDetailLink,proto3" json:"match_detail_link,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{7}
}

func (x *Match) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Match) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

func (x *Match) GetClub_1() *Club {
	if x != nil {
		return x.Club_1
	}
	return nil
}

func (x *Match) GetClub_2() *Club {
	if x != nil {
		return x.Club_2
	}
	return nil
}

func (x *Match) GetScores() string {
	if x != nil {
		return x.Scores
	}
	return ""
}

func (x *Match) GetMatchDetailLink() string {
	if x != nil {
		return x.MatchDetailLink
	}
	return ""
}

type Club struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Logo string `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (x *Club) Reset() {
	*x = Club{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Club) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Club) ProtoMessage() {}

func (x *Club) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Club.ProtoReflect.Descriptor instead.
func (*Club) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{8}
}

func (x *Club) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Club) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type MatchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchDetailTitle *MatchDetailTitle `protobuf:"bytes,2,opt,name=match_detail_title,json=matchDetailTitle,proto3" json:"match_detail_title,omitempty"`
	MatchOverview    *MatchOverview    `protobuf:"bytes,3,opt,name=match_overview,json=matchOverview,proto3" json:"match_overview,omitempty"`
	MatchStatistics  *MatchStatistics  `protobuf:"bytes,4,opt,name=match_statistics,json=matchStatistics,proto3" json:"match_statistics,omitempty"`
	MatchLineup      *MatchLineup      `protobuf:"bytes,5,opt,name=match_lineup,json=matchLineup,proto3" json:"match_lineup,omitempty"`
	MatchProgress    *MatchProgress    `protobuf:"bytes,6,opt,name=match_progress,json=matchProgress,proto3" json:"match_progress,omitempty"`
}

func (x *MatchDetail) Reset() {
	*x = MatchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetail) ProtoMessage() {}

func (x *MatchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetail.ProtoReflect.Descriptor instead.
func (*MatchDetail) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{9}
}

func (x *MatchDetail) GetMatchDetailTitle() *MatchDetailTitle {
	if x != nil {
		return x.MatchDetailTitle
	}
	return nil
}

func (x *MatchDetail) GetMatchOverview() *MatchOverview {
	if x != nil {
		return x.MatchOverview
	}
	return nil
}

func (x *MatchDetail) GetMatchStatistics() *MatchStatistics {
	if x != nil {
		return x.MatchStatistics
	}
	return nil
}

func (x *MatchDetail) GetMatchLineup() *MatchLineup {
	if x != nil {
		return x.MatchLineup
	}
	return nil
}

func (x *MatchDetail) GetMatchProgress() *MatchProgress {
	if x != nil {
		return x.MatchProgress
	}
	return nil
}

type MatchDetailTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Club_1      *Club  `protobuf:"bytes,1,opt,name=club_1,json=club1,proto3" json:"club_1,omitempty"`
	Club_2      *Club  `protobuf:"bytes,2,opt,name=club_2,json=club2,proto3" json:"club_2,omitempty"`
	MatchScore  string `protobuf:"bytes,3,opt,name=match_score,json=matchScore,proto3" json:"match_score,omitempty"`
	MatchStatus string `protobuf:"bytes,4,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`
}

func (x *MatchDetailTitle) Reset() {
	*x = MatchDetailTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetailTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetailTitle) ProtoMessage() {}

func (x *MatchDetailTitle) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetailTitle.ProtoReflect.Descriptor instead.
func (*MatchDetailTitle) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{10}
}

func (x *MatchDetailTitle) GetClub_1() *Club {
	if x != nil {
		return x.Club_1
	}
	return nil
}

func (x *MatchDetailTitle) GetClub_2() *Club {
	if x != nil {
		return x.Club_2
	}
	return nil
}

func (x *MatchDetailTitle) GetMatchScore() string {
	if x != nil {
		return x.MatchScore
	}
	return ""
}

func (x *MatchDetailTitle) GetMatchStatus() string {
	if x != nil {
		return x.MatchStatus
	}
	return ""
}

type MatchOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Club_1Overview []*OverviewItem `protobuf:"bytes,1,rep,name=club_1_overview,json=club1Overview,proto3" json:"club_1_overview,omitempty"`
	Club_2Overview []*OverviewItem `protobuf:"bytes,2,rep,name=club_2_overview,json=club2Overview,proto3" json:"club_2_overview,omitempty"`
}

func (x *MatchOverview) Reset() {
	*x = MatchOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchOverview) ProtoMessage() {}

func (x *MatchOverview) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchOverview.ProtoReflect.Descriptor instead.
func (*MatchOverview) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{11}
}

func (x *MatchOverview) GetClub_1Overview() []*OverviewItem {
	if x != nil {
		return x.Club_1Overview
	}
	return nil
}

func (x *MatchOverview) GetClub_2Overview() []*OverviewItem {
	if x != nil {
		return x.Club_2Overview
	}
	return nil
}

type OverviewItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	ImageType string `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	Time      string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *OverviewItem) Reset() {
	*x = OverviewItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewItem) ProtoMessage() {}

func (x *OverviewItem) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewItem.ProtoReflect.Descriptor instead.
func (*OverviewItem) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{12}
}

func (x *OverviewItem) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *OverviewItem) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *OverviewItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type MatchStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics []*StatisticsItem `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *MatchStatistics) Reset() {
	*x = MatchStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatistics) ProtoMessage() {}

func (x *MatchStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatistics.ProtoReflect.Descriptor instead.
func (*MatchStatistics) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{13}
}

func (x *MatchStatistics) GetStatistics() []*StatisticsItem {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type StatisticsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatClub_1  string `protobuf:"bytes,1,opt,name=stat_club_1,json=statClub1,proto3" json:"stat_club_1,omitempty"`
	StatContent string `protobuf:"bytes,2,opt,name=stat_content,json=statContent,proto3" json:"stat_content,omitempty"`
	StatClub_2  string `protobuf:"bytes,3,opt,name=stat_club_2,json=statClub2,proto3" json:"stat_club_2,omitempty"`
}

func (x *StatisticsItem) Reset() {
	*x = StatisticsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsItem) ProtoMessage() {}

func (x *StatisticsItem) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsItem.ProtoReflect.Descriptor instead.
func (*StatisticsItem) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{14}
}

func (x *StatisticsItem) GetStatClub_1() string {
	if x != nil {
		return x.StatClub_1
	}
	return ""
}

func (x *StatisticsItem) GetStatContent() string {
	if x != nil {
		return x.StatContent
	}
	return ""
}

func (x *StatisticsItem) GetStatClub_2() string {
	if x != nil {
		return x.StatClub_2
	}
	return ""
}

type MatchProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*MatchEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *MatchProgress) Reset() {
	*x = MatchProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProgress) ProtoMessage() {}

func (x *MatchProgress) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProgress.ProtoReflect.Descriptor instead.
func (*MatchProgress) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{15}
}

func (x *MatchProgress) GetEvents() []*MatchEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type MatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MatchEvent) Reset() {
	*x = MatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEvent) ProtoMessage() {}

func (x *MatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEvent.ProtoReflect.Descriptor instead.
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{16}
}

func (x *MatchEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MatchEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MatchLineup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineupClub_1 *MatchLineUpDetail `protobuf:"bytes,1,opt,name=lineup_club_1,json=lineupClub1,proto3" json:"lineup_club_1,omitempty"`
	LineupClub_2 *MatchLineUpDetail `protobuf:"bytes,2,opt,name=lineup_club_2,json=lineupClub2,proto3" json:"lineup_club_2,omitempty"`
}

func (x *MatchLineup) Reset() {
	*x = MatchLineup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLineup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineup) ProtoMessage() {}

func (x *MatchLineup) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineup.ProtoReflect.Descriptor instead.
func (*MatchLineup) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{17}
}

func (x *MatchLineup) GetLineupClub_1() *MatchLineUpDetail {
	if x != nil {
		return x.LineupClub_1
	}
	return nil
}

func (x *MatchLineup) GetLineupClub_2() *MatchLineUpDetail {
	if x != nil {
		return x.LineupClub_2
	}
	return nil
}

type MatchLineUpDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubName   string       `protobuf:"bytes,1,opt,name=club_name,json=clubName,proto3" json:"club_name,omitempty"`
	Formation  string       `protobuf:"bytes,2,opt,name=formation,proto3" json:"formation,omitempty"`
	ShirtColor string       `protobuf:"bytes,3,opt,name=shirt_color,json=shirtColor,proto3" json:"shirt_color,omitempty"`
	PitchRow   []*PitchRows `protobuf:"bytes,4,rep,name=pitch_row,json=pitchRow,proto3" json:"pitch_row,omitempty"`
}

func (x *MatchLineUpDetail) Reset() {
	*x = MatchLineUpDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchLineUpDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineUpDetail) ProtoMessage() {}

func (x *MatchLineUpDetail) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineUpDetail.ProtoReflect.Descriptor instead.
func (*MatchLineUpDetail) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{18}
}

func (x *MatchLineUpDetail) GetClubName() string {
	if x != nil {
		return x.ClubName
	}
	return ""
}

func (x *MatchLineUpDetail) GetFormation() string {
	if x != nil {
		return x.Formation
	}
	return ""
}

func (x *MatchLineUpDetail) GetShirtColor() string {
	if x != nil {
		return x.ShirtColor
	}
	return ""
}

func (x *MatchLineUpDetail) GetPitchRow() []*PitchRows {
	if x != nil {
		return x.PitchRow
	}
	return nil
}

type PitchRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PitchRowsDetail []*PitchRowsDetail `protobuf:"bytes,1,rep,name=pitch_rows_detail,json=pitchRowsDetail,proto3" json:"pitch_rows_detail,omitempty"`
}

func (x *PitchRows) Reset() {
	*x = PitchRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PitchRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PitchRows) ProtoMessage() {}

func (x *PitchRows) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PitchRows.ProtoReflect.Descriptor instead.
func (*PitchRows) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{19}
}

func (x *PitchRows) GetPitchRowsDetail() []*PitchRowsDetail {
	if x != nil {
		return x.PitchRowsDetail
	}
	return nil
}

type PitchRowsDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName   string `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	PlayerNumber string `protobuf:"bytes,2,opt,name=player_number,json=playerNumber,proto3" json:"player_number,omitempty"`
}

func (x *PitchRowsDetail) Reset() {
	*x = PitchRowsDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PitchRowsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PitchRowsDetail) ProtoMessage() {}

func (x *PitchRowsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PitchRowsDetail.ProtoReflect.Descriptor instead.
func (*PitchRowsDetail) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{20}
}

func (x *PitchRowsDetail) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PitchRowsDetail) GetPlayerNumber() string {
	if x != nil {
		return x.PlayerNumber
	}
	return ""
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{21}
}

func (x *Date) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MatchURLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url []string `protobuf:"bytes,1,rep,name=url,proto3" json:"url,omitempty"`
}

func (x *MatchURLs) Reset() {
	*x = MatchURLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crawler_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchURLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchURLs) ProtoMessage() {}

func (x *MatchURLs) ProtoReflect() protoreflect.Message {
	mi := &file_crawler_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchURLs.ProtoReflect.Descriptor instead.
func (*MatchURLs) Descriptor() ([]byte, []int) {
	return file_crawler_proto_rawDescGZIP(), []int{22}
}

func (x *MatchURLs) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

var File_crawler_proto protoreflect.FileDescriptor

var file_crawler_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a,
	0x0f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x65, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x78, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x55, 0x0a,
	0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x5c, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12,
	0x31, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4f, 0x6e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x10,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x31, 0x12,
	0x29, 0x0a, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x62, 0x52, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x2e,
	0x0a, 0x04, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0xeb,
	0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4c,
	0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x48, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x31, 0x12, 0x29, 0x0a, 0x06,
	0x63, 0x6c, 0x75, 0x62, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x62,
	0x52, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x42, 0x0a,
	0x0f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x31, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x62, 0x31, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x32, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x62, 0x32, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x55, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x0f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x73, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x31, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x43, 0x6c, 0x75,
	0x62, 0x32, 0x22, 0x41, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e,
	0x65, 0x55, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x43, 0x6c, 0x75, 0x62, 0x31, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x43, 0x6c, 0x75, 0x62, 0x32, 0x22, 0xa5, 0x01, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x69, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34, 0x0a,
	0x09, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x08, 0x70, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x77, 0x22, 0x56, 0x0a, 0x09, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x49, 0x0a, 0x11, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x57, 0x0a, 0x0f, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x1d, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x32,
	0xd7, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x1a, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x65, 0x64, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x1a,
	0x21, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x4f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x12, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x1e, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x52, 0x4c, 0x73, 0x1a, 0x19, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x30, 0x01, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x69, 0x6c, 0x2d, 0x67, 0x6f, 0x2d,
	0x70, 0x68, 0x61, 0x6e, 0x2f, 0x46, 0x6f, 0x6f, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2d, 0x6e, 0x65,
	0x77, 0x73, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x66, 0x69, 0x6c, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crawler_proto_rawDescOnce sync.Once
	file_crawler_proto_rawDescData = file_crawler_proto_rawDesc
)

func file_crawler_proto_rawDescGZIP() []byte {
	file_crawler_proto_rawDescOnce.Do(func() {
		file_crawler_proto_rawDescData = protoimpl.X.CompressGZIP(file_crawler_proto_rawDescData)
	})
	return file_crawler_proto_rawDescData
}

var file_crawler_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_crawler_proto_goTypes = []interface{}{
	(*KeywordToSearch)(nil),     // 0: crawlerproto.KeywordToSearch
	(*ConfigCrawler)(nil),       // 1: crawlerproto.ConfigCrawler
	(*ArticleAddedCrawler)(nil), // 2: crawlerproto.ArticleAddedCrawler
	(*Article)(nil),             // 3: crawlerproto.Article
	(*ArticlesReponse)(nil),     // 4: crawlerproto.ArticlesReponse
	(*SchedulesReponse)(nil),    // 5: crawlerproto.SchedulesReponse
	(*ScheduleOnLeague)(nil),    // 6: crawlerproto.ScheduleOnLeague
	(*Match)(nil),               // 7: crawlerproto.Match
	(*Club)(nil),                // 8: crawlerproto.Club
	(*MatchDetail)(nil),         // 9: crawlerproto.MatchDetail
	(*MatchDetailTitle)(nil),    // 10: crawlerproto.MatchDetailTitle
	(*MatchOverview)(nil),       // 11: crawlerproto.MatchOverview
	(*OverviewItem)(nil),        // 12: crawlerproto.OverviewItem
	(*MatchStatistics)(nil),     // 13: crawlerproto.MatchStatistics
	(*StatisticsItem)(nil),      // 14: crawlerproto.StatisticsItem
	(*MatchProgress)(nil),       // 15: crawlerproto.MatchProgress
	(*MatchEvent)(nil),          // 16: crawlerproto.MatchEvent
	(*MatchLineup)(nil),         // 17: crawlerproto.MatchLineup
	(*MatchLineUpDetail)(nil),   // 18: crawlerproto.MatchLineUpDetail
	(*PitchRows)(nil),           // 19: crawlerproto.PitchRows
	(*PitchRowsDetail)(nil),     // 20: crawlerproto.PitchRowsDetail
	(*Date)(nil),                // 21: crawlerproto.Date
	(*MatchURLs)(nil),           // 22: crawlerproto.MatchURLs
}
var file_crawler_proto_depIdxs = []int32{
	3,  // 0: crawlerproto.ArticleAddedCrawler.articles:type_name -> crawlerproto.Article
	3,  // 1: crawlerproto.ArticlesReponse.articles:type_name -> crawlerproto.Article
	6,  // 2: crawlerproto.SchedulesReponse.schedule_on_leagues:type_name -> crawlerproto.ScheduleOnLeague
	7,  // 3: crawlerproto.ScheduleOnLeague.matches:type_name -> crawlerproto.Match
	8,  // 4: crawlerproto.Match.club_1:type_name -> crawlerproto.Club
	8,  // 5: crawlerproto.Match.club_2:type_name -> crawlerproto.Club
	10, // 6: crawlerproto.MatchDetail.match_detail_title:type_name -> crawlerproto.MatchDetailTitle
	11, // 7: crawlerproto.MatchDetail.match_overview:type_name -> crawlerproto.MatchOverview
	13, // 8: crawlerproto.MatchDetail.match_statistics:type_name -> crawlerproto.MatchStatistics
	17, // 9: crawlerproto.MatchDetail.match_lineup:type_name -> crawlerproto.MatchLineup
	15, // 10: crawlerproto.MatchDetail.match_progress:type_name -> crawlerproto.MatchProgress
	8,  // 11: crawlerproto.MatchDetailTitle.club_1:type_name -> crawlerproto.Club
	8,  // 12: crawlerproto.MatchDetailTitle.club_2:type_name -> crawlerproto.Club
	12, // 13: crawlerproto.MatchOverview.club_1_overview:type_name -> crawlerproto.OverviewItem
	12, // 14: crawlerproto.MatchOverview.club_2_overview:type_name -> crawlerproto.OverviewItem
	14, // 15: crawlerproto.MatchStatistics.statistics:type_name -> crawlerproto.StatisticsItem
	16, // 16: crawlerproto.MatchProgress.events:type_name -> crawlerproto.MatchEvent
	18, // 17: crawlerproto.MatchLineup.lineup_club_1:type_name -> crawlerproto.MatchLineUpDetail
	18, // 18: crawlerproto.MatchLineup.lineup_club_2:type_name -> crawlerproto.MatchLineUpDetail
	19, // 19: crawlerproto.MatchLineUpDetail.pitch_row:type_name -> crawlerproto.PitchRows
	20, // 20: crawlerproto.PitchRows.pitch_rows_detail:type_name -> crawlerproto.PitchRowsDetail
	0,  // 21: crawlerproto.CrawlerService.GetArticles:input_type -> crawlerproto.KeywordToSearch
	1,  // 22: crawlerproto.CrawlerService.GetArticlesFromAddedCrawler:input_type -> crawlerproto.ConfigCrawler
	21, // 23: crawlerproto.CrawlerService.GetSchedulesOnDay:input_type -> crawlerproto.Date
	22, // 24: crawlerproto.CrawlerService.GetMatchDetail:input_type -> crawlerproto.MatchURLs
	4,  // 25: crawlerproto.CrawlerService.GetArticles:output_type -> crawlerproto.ArticlesReponse
	2,  // 26: crawlerproto.CrawlerService.GetArticlesFromAddedCrawler:output_type -> crawlerproto.ArticleAddedCrawler
	5,  // 27: crawlerproto.CrawlerService.GetSchedulesOnDay:output_type -> crawlerproto.SchedulesReponse
	9,  // 28: crawlerproto.CrawlerService.GetMatchDetail:output_type -> crawlerproto.MatchDetail
	25, // [25:29] is the sub-list for method output_type
	21, // [21:25] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_crawler_proto_init() }
func file_crawler_proto_init() {
	if File_crawler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crawler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordToSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigCrawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleAddedCrawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticlesReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulesReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleOnLeague); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Club); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetailTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLineup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchLineUpDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PitchRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PitchRowsDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crawler_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchURLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crawler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_crawler_proto_goTypes,
		DependencyIndexes: file_crawler_proto_depIdxs,
		MessageInfos:      file_crawler_proto_msgTypes,
	}.Build()
	File_crawler_proto = out.File
	file_crawler_proto_rawDesc = nil
	file_crawler_proto_goTypes = nil
	file_crawler_proto_depIdxs = nil
}
