// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: articles.proto

package grpcfile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticleService_GetArticles_FullMethodName = "/grpcfile.ArticleService/GetArticles"
)

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	// Get articles with keywords
	GetArticles(ctx context.Context, in *AllConfigs, opts ...grpc.CallOption) (ArticleService_GetArticlesClient, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) GetArticles(ctx context.Context, in *AllConfigs, opts ...grpc.CallOption) (ArticleService_GetArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArticleService_ServiceDesc.Streams[0], ArticleService_GetArticles_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &articleServiceGetArticlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArticleService_GetArticlesClient interface {
	Recv() (*ArticlesReponse, error)
	grpc.ClientStream
}

type articleServiceGetArticlesClient struct {
	grpc.ClientStream
}

func (x *articleServiceGetArticlesClient) Recv() (*ArticlesReponse, error) {
	m := new(ArticlesReponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	// Get articles with keywords
	GetArticles(*AllConfigs, ArticleService_GetArticlesServer) error
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) GetArticles(*AllConfigs, ArticleService_GetArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_GetArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllConfigs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArticleServiceServer).GetArticles(m, &articleServiceGetArticlesServer{stream})
}

type ArticleService_GetArticlesServer interface {
	Send(*ArticlesReponse) error
	grpc.ServerStream
}

type articleServiceGetArticlesServer struct {
	grpc.ServerStream
}

func (x *articleServiceGetArticlesServer) Send(m *ArticlesReponse) error {
	return x.ServerStream.SendMsg(m)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcfile.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArticles",
			Handler:       _ArticleService_GetArticles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "articles.proto",
}
